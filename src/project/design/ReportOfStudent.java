/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.design;

import java.io.InputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import project.controller.AttendanceController;
import project.controller.ClassDetailController;
import project.controller.ExamController;
import project.controller.PaymentController;
import project.controller.ResultController;
import project.controller.SessionController;
import project.controller.StudentController;
import project.model.Attendance;
import project.model.ClassDetail;
import project.model.Exam;
import project.model.Payment;
import project.model.Result;
import project.model.Session;
import project.model.Student;

/**
 *
 * @author 
 */
public class ReportOfStudent extends javax.swing.JPanel {

    /**
     * Creates new form ReportOfStudent
     */
    public ReportOfStudent() {
        initComponents();
        loadAllStudentDetail();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneStudent = new javax.swing.JScrollPane();
        tableStudent = new javax.swing.JTable();
        scrollPaneClass = new javax.swing.JScrollPane();
        tableClass = new javax.swing.JTable();
        scrollPaneAttendance = new javax.swing.JScrollPane();
        tableAttendance = new javax.swing.JTable();
        scrollPanePayment = new javax.swing.JScrollPane();
        tablePayment = new javax.swing.JTable();
        scrollPaneExam = new javax.swing.JScrollPane();
        tableExam = new javax.swing.JTable();
        labelViewClass = new javax.swing.JLabel();
        labelAllStudentDtail = new javax.swing.JLabel();
        labelAllStudentDtail1 = new javax.swing.JLabel();
        labelViewDetail = new javax.swing.JLabel();
        labelExamDetail = new javax.swing.JLabel();
        labelPaymentDetail = new javax.swing.JLabel();
        labelAttendanceDetail = new javax.swing.JLabel();
        labelPrintAllStudent = new javax.swing.JLabel();
        labelPrintClassDetail = new javax.swing.JLabel();
        labelPrintStudentExamDetail = new javax.swing.JLabel();
        labelPrintStudentPayment = new javax.swing.JLabel();
        labelPrintStudentAttendance = new javax.swing.JLabel();

        setOpaque(false);

        tableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name", "Address", "Tele. No", "Register Date", "Register Fee"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableStudent.setGridColor(new java.awt.Color(255, 255, 255));
        tableStudent.setSelectionBackground(new java.awt.Color(0, 0, 102));
        tableStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableStudentMouseClicked(evt);
            }
        });
        scrollPaneStudent.setViewportView(tableStudent);
        if (tableStudent.getColumnModel().getColumnCount() > 0) {
            tableStudent.getColumnModel().getColumn(0).setPreferredWidth(60);
            tableStudent.getColumnModel().getColumn(2).setPreferredWidth(150);
            tableStudent.getColumnModel().getColumn(3).setPreferredWidth(75);
            tableStudent.getColumnModel().getColumn(4).setPreferredWidth(90);
            tableStudent.getColumnModel().getColumn(5).setPreferredWidth(75);
        }

        tableClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Subject", "Teacher", "Grade", "Day", "Period"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableClass.setSelectionBackground(new java.awt.Color(0, 0, 102));
        tableClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClassMouseClicked(evt);
            }
        });
        scrollPaneClass.setViewportView(tableClass);
        if (tableClass.getColumnModel().getColumnCount() > 0) {
            tableClass.getColumnModel().getColumn(0).setPreferredWidth(50);
            tableClass.getColumnModel().getColumn(1).setPreferredWidth(90);
            tableClass.getColumnModel().getColumn(2).setPreferredWidth(120);
            tableClass.getColumnModel().getColumn(3).setPreferredWidth(30);
            tableClass.getColumnModel().getColumn(5).setPreferredWidth(100);
        }

        tableAttendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attendance ID", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableAttendance.setSelectionBackground(new java.awt.Color(0, 0, 102));
        scrollPaneAttendance.setViewportView(tableAttendance);

        tablePayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment ID", "Fee", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablePayment.setSelectionBackground(new java.awt.Color(0, 0, 102));
        scrollPanePayment.setViewportView(tablePayment);

        tableExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exam ID", "Exam Name", "Date", "Marks", "State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableExam.setName(""); // NOI18N
        tableExam.setSelectionBackground(new java.awt.Color(0, 0, 102));
        scrollPaneExam.setViewportView(tableExam);
        if (tableExam.getColumnModel().getColumnCount() > 0) {
            tableExam.getColumnModel().getColumn(0).setPreferredWidth(50);
            tableExam.getColumnModel().getColumn(1).setPreferredWidth(140);
            tableExam.getColumnModel().getColumn(3).setPreferredWidth(40);
            tableExam.getColumnModel().getColumn(4).setPreferredWidth(40);
        }

        labelViewClass.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Entypo_e75c(1)_64.png"))); // NOI18N
        labelViewClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelViewClassMouseClicked(evt);
            }
        });

        labelAllStudentDtail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelAllStudentDtail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAllStudentDtail.setText("All Student Detail");

        labelAllStudentDtail1.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelAllStudentDtail1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAllStudentDtail1.setText("Class Detail");

        labelViewDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Entypo_e75e(0)_64.png"))); // NOI18N
        labelViewDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelViewDetailMouseClicked(evt);
            }
        });

        labelExamDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelExamDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExamDetail.setText("Exam Detail");

        labelPaymentDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelPaymentDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPaymentDetail.setText("Payment Detail");

        labelAttendanceDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelAttendanceDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAttendanceDetail.setText("Attendance Detail");

        labelPrintAllStudent.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintAllStudent.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPrintAllStudent.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintAllStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintAllStudent.setText("Print");
        labelPrintAllStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintAllStudent.setOpaque(true);
        labelPrintAllStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintAllStudentMouseClicked(evt);
            }
        });

        labelPrintClassDetail.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintClassDetail.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPrintClassDetail.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintClassDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintClassDetail.setText("Print");
        labelPrintClassDetail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintClassDetail.setOpaque(true);
        labelPrintClassDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintClassDetailMouseClicked(evt);
            }
        });

        labelPrintStudentExamDetail.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentExamDetail.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPrintStudentExamDetail.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentExamDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentExamDetail.setText("Print");
        labelPrintStudentExamDetail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentExamDetail.setOpaque(true);
        labelPrintStudentExamDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentExamDetailMouseClicked(evt);
            }
        });

        labelPrintStudentPayment.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentPayment.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPrintStudentPayment.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentPayment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentPayment.setText("Print");
        labelPrintStudentPayment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentPayment.setOpaque(true);
        labelPrintStudentPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentPaymentMouseClicked(evt);
            }
        });

        labelPrintStudentAttendance.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentAttendance.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPrintStudentAttendance.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentAttendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentAttendance.setText("Print");
        labelPrintStudentAttendance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentAttendance.setOpaque(true);
        labelPrintStudentAttendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentAttendanceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(labelAllStudentDtail, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelExamDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPaneStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(268, 268, 268)
                                .addComponent(labelViewClass)
                                .addGap(109, 109, 109)
                                .addComponent(labelPrintAllStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scrollPaneClass, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(labelAllStudentDtail1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labelPaymentDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPrintStudentExamDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(labelAttendanceDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPrintStudentPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(66, 66, 66)
                                    .addComponent(labelViewDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(4, 4, 4)
                                    .addComponent(labelPrintClassDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(scrollPaneAttendance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelPrintStudentAttendance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(scrollPaneExam, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(scrollPanePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAllStudentDtail)
                    .addComponent(labelExamDetail))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPaneStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelViewClass, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPrintAllStudent))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelAllStudentDtail1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPaneExam, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPaymentDetail)
                            .addComponent(labelPrintStudentExamDetail))
                        .addGap(8, 8, 8)
                        .addComponent(scrollPanePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAttendanceDetail)
                            .addComponent(labelPrintStudentPayment))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrollPaneAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelPrintStudentAttendance)
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelViewDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(labelPrintClassDetail))
                            .addComponent(scrollPaneClass, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void labelViewClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelViewClassMouseClicked
        try{
            searchAllSession();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelViewClassMouseClicked

    private void tableStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableStudentMouseClicked
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        defaultTableModelClass.setRowCount(0);
        DefaultTableModel defaultTableModelAttendance=(DefaultTableModel) tableAttendance.getModel();
        defaultTableModelAttendance.setRowCount(0);
        DefaultTableModel defaultTableModelExam=(DefaultTableModel) tableExam.getModel();
        defaultTableModelExam.setRowCount(0);
        DefaultTableModel defaultTableModelPayment=(DefaultTableModel) tablePayment.getModel();
        defaultTableModelPayment.setRowCount(0);
    }//GEN-LAST:event_tableStudentMouseClicked

    private void labelViewDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelViewDetailMouseClicked
        try{
            searchClassDetial();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelViewDetailMouseClicked

    private void tableClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClassMouseClicked
        DefaultTableModel defaultTableModelAttendance=(DefaultTableModel) tableAttendance.getModel();
        defaultTableModelAttendance.setRowCount(0);
        DefaultTableModel defaultTableModelExam=(DefaultTableModel) tableExam.getModel();
        defaultTableModelExam.setRowCount(0);
        DefaultTableModel defaultTableModelPayment=(DefaultTableModel) tablePayment.getModel();
        defaultTableModelPayment.setRowCount(0);
    }//GEN-LAST:event_tableClassMouseClicked

    private void labelPrintAllStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintAllStudentMouseClicked
        printAllStudentDetail();
    }//GEN-LAST:event_labelPrintAllStudentMouseClicked

    private void labelPrintClassDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintClassDetailMouseClicked
        try{
            printClassDetail();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select Student!");
        }
    }//GEN-LAST:event_labelPrintClassDetailMouseClicked

    private void labelPrintStudentExamDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentExamDetailMouseClicked
        try{
            printStudentExamDetail();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select Student and Class!");
        }
    }//GEN-LAST:event_labelPrintStudentExamDetailMouseClicked

    private void labelPrintStudentPaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentPaymentMouseClicked
        try{
            printStudentPayment();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select Student and Class!");
        }
    }//GEN-LAST:event_labelPrintStudentPaymentMouseClicked

    private void labelPrintStudentAttendanceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentAttendanceMouseClicked
        try{
            printStudentAttendance();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select Student and Class!");
        }
    }//GEN-LAST:event_labelPrintStudentAttendanceMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelAllStudentDtail;
    private javax.swing.JLabel labelAllStudentDtail1;
    private javax.swing.JLabel labelAttendanceDetail;
    private javax.swing.JLabel labelExamDetail;
    private javax.swing.JLabel labelPaymentDetail;
    private javax.swing.JLabel labelPrintAllStudent;
    private javax.swing.JLabel labelPrintClassDetail;
    private javax.swing.JLabel labelPrintStudentAttendance;
    private javax.swing.JLabel labelPrintStudentExamDetail;
    private javax.swing.JLabel labelPrintStudentPayment;
    private javax.swing.JLabel labelViewClass;
    private javax.swing.JLabel labelViewDetail;
    private javax.swing.JScrollPane scrollPaneAttendance;
    private javax.swing.JScrollPane scrollPaneClass;
    private javax.swing.JScrollPane scrollPaneExam;
    private javax.swing.JScrollPane scrollPanePayment;
    private javax.swing.JScrollPane scrollPaneStudent;
    private javax.swing.JTable tableAttendance;
    private javax.swing.JTable tableClass;
    private javax.swing.JTable tableExam;
    private javax.swing.JTable tablePayment;
    private javax.swing.JTable tableStudent;
    // End of variables declaration//GEN-END:variables

    private void loadAllStudentDetail() {
        ArrayList<Student> allStudentList;
        try {
            allStudentList=StudentController.viewStudent();
            DefaultTableModel defaultTableModel=(DefaultTableModel) tableStudent.getModel();
            defaultTableModel.setRowCount(0);
            for (Student student : allStudentList) {
                Object[] rowData={student.getSID(), student.getName(), student.getAddress(), student.getTele_no(), student.getRegister_date(), student.getRegister_fee()};
                defaultTableModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchAllSession() {
        int rowNumber=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableStudent.getModel();
        String studentId=(String) defaultTableModel.getValueAt(rowNumber, 0);
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        defaultTableModelClass.setRowCount(0);
        ArrayList<Session> allSessionList;
        try {
            allSessionList=SessionController.searchSessionFromSID(studentId);
            for (Session session : allSessionList) {
                viewAllClass(session);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllClass(Session session) {
        String classId=session.getCID();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableClass.getModel();
        try {
            ClassDetail classDetail=ClassDetailController.searchClassDetail(classId);
            Object[] rowData={classDetail.getCID(), classDetail.getSuject(), classDetail.getTeacher(), classDetail.getGrade(), classDetail.getDay(), classDetail.getPeriod()};
            defaultTableModel.addRow(rowData);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchClassDetial() {
        int selectStudentRow=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        String studentId=(String) defaultTableModelStudent.getValueAt(selectStudentRow, 0);
        
        int selectClassRow=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        String classId=(String) defaultTableModelClass.getValueAt(selectClassRow, 0);
        
        DefaultTableModel defaultTableModelAttendance=(DefaultTableModel) tableAttendance.getModel();
        defaultTableModelAttendance.setRowCount(0);
        DefaultTableModel defaultTableModelExam=(DefaultTableModel) tableExam.getModel();
        defaultTableModelExam.setRowCount(0);
        DefaultTableModel defaultTableModelPayment=(DefaultTableModel) tablePayment.getModel();
        defaultTableModelPayment.setRowCount(0);
        
        try {
            Session session=SessionController.searchSession(studentId, classId);
            String sessionId=session.getSEID();
            viewAllAttendance(sessionId);
            viewAllPayment(sessionId);
            viewAllResult(sessionId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllAttendance(String sessionId) {
        ArrayList<Attendance> allAttendanceList;
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableAttendance.getModel();
        try {
            allAttendanceList=AttendanceController.viewAttendanceOfSEID(sessionId);
            for (Attendance attendance : allAttendanceList) {
                Object[] rowData={attendance.getAID(), attendance.getDate()};
                defaultTableModel.addRow(rowData);
            }           
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllPayment(String sessionId) {
        ArrayList<Payment> allPaymentList;
        DefaultTableModel defaultTableModel=(DefaultTableModel) tablePayment.getModel();
        try {
            allPaymentList=PaymentController.viewPayment(sessionId);
            for (Payment payment : allPaymentList) {
                Object[] rowData={payment.getPID(), payment.getFee(), payment.getDate()};
                defaultTableModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllResult(String sessionId) {
        ArrayList<Result> allResultList;
        try {
            allResultList=ResultController.viewResult(sessionId);
            for (Result result : allResultList) {
                String examId=result.getEID();
                String marks=result.getMark();
                String state=result.getState();
                viewAllExam(examId, marks, state);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllExam(String examId, String marks, String state) {
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableExam.getModel();
        try {
            Exam exam=ExamController.searchExam(examId);
            Object[] rowData={examId, exam.getExam_name(), exam.getDate(), marks, state};
            defaultTableModel.addRow(rowData);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printAllStudentDetail() {
        InputStream inputStream = getClass().getResourceAsStream("allStudentDetail.jrxml");
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap<String, Object>(), new JRTableModelDataSource(tableStudent.getModel()));
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printClassDetail() {
        InputStream inputStream = getClass().getResourceAsStream("classDetail.jrxml");
        int rowNumber=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String studentId = (String) defaultTableModel.getValueAt(rowNumber, 0);
            String studentName = (String) defaultTableModel.getValueAt(rowNumber, 1);
            String address = (String) defaultTableModel.getValueAt(rowNumber, 2);
            int teleNo = Integer.parseInt(String.valueOf(defaultTableModel.getValueAt(rowNumber, 3)));
            String registerDate = (String) defaultTableModel.getValueAt(rowNumber, 4);
            double registerFee = Double.parseDouble(String.valueOf(defaultTableModel.getValueAt(rowNumber, 5)));
            
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            hashMap.put("address", address);
            hashMap.put("teleNo", teleNo);
            hashMap.put("registerDate", registerDate);
            hashMap.put("registerFee", registerFee);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableClass.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentExamDetail() {
        InputStream inputStream = getClass().getResourceAsStream("studentExamDetail.jrxml");
        int rowNumberClass=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        int rowNumberStudent=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumberClass, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumberClass, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumberClass, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumberClass, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumberClass, 5);
            
            String studentId = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 1);
            String studentName = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 2);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableExam.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentPayment() {
        InputStream inputStream = getClass().getResourceAsStream("studentPayment.jrxml");
        int rowNumberClass=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        int rowNumberStudent=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumberClass, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumberClass, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumberClass, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumberClass, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumberClass, 5);
            
            String studentId = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 1);
            String studentName = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 2);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tablePayment.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentAttendance() {
        InputStream inputStream = getClass().getResourceAsStream("studentAttendance.jrxml");
        int rowNumberClass=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        int rowNumberStudent=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumberClass, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumberClass, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumberClass, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumberClass, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumberClass, 5);
            
            String studentId = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 1);
            String studentName = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 2);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableAttendance.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
