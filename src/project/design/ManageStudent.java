/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.design;

import java.io.InputStream;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import project.controller.ClassDetailController;
import project.controller.GenerateIdController;
import project.controller.SessionController;
import project.controller.StudentController;
import project.controller.ValidationController;
import project.model.ClassDetail;
import project.model.Session;
import project.model.Student;

/**
 *
 * @author
 */
public class ManageStudent extends javax.swing.JFrame {

    /**
     * Creates new form ManageStudent
     */
    public ManageStudent() {
        initComponents();
        loadAllClassSubjectToArrayList();
        loadDate();
        generateStudentId();
        generateSessionId();
        textStudentId.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        labelMainTitle = new javax.swing.JLabel();
        panelStudentDetail = new javax.swing.JPanel();
        labelStudentId = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        labelAddress = new javax.swing.JLabel();
        labelTeleNo = new javax.swing.JLabel();
        labelRegisterDate = new javax.swing.JLabel();
        labelRegisterFee = new javax.swing.JLabel();
        textStudentId = new javax.swing.JTextField();
        textName = new javax.swing.JTextField();
        textAddress = new javax.swing.JTextField();
        textTeleNo = new javax.swing.JTextField();
        textRegisterDate = new javax.swing.JTextField();
        labelModifyStudent = new javax.swing.JLabel();
        labelRemoveStudent = new javax.swing.JLabel();
        labelClear = new javax.swing.JLabel();
        textRegisterFee = new javax.swing.JTextField();
        panelClassDetail = new javax.swing.JPanel();
        labelSubject = new javax.swing.JLabel();
        labelGrade = new javax.swing.JLabel();
        comboBoxSubject = new javax.swing.JComboBox();
        labelTeacher = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClassDetail = new javax.swing.JTable();
        labelDay = new javax.swing.JLabel();
        labelPeriod = new javax.swing.JLabel();
        comboBoxDay = new javax.swing.JComboBox();
        comboBoxPeriod = new javax.swing.JComboBox();
        labelClassId = new javax.swing.JLabel();
        labelSessionId = new javax.swing.JLabel();
        textClassId = new javax.swing.JTextField();
        textSessionId = new javax.swing.JTextField();
        comboBoxTeacher = new javax.swing.JComboBox();
        labelStudentRegisterNewClass = new javax.swing.JLabel();
        labelStudentRemoveInClass = new javax.swing.JLabel();
        comboBoxGrade = new javax.swing.JComboBox();
        labelRegisterStudent = new javax.swing.JLabel();
        labelDiscribeRegisterNewClass = new javax.swing.JLabel();
        labelDiscribeRemoveInClass = new javax.swing.JLabel();
        labelBackToFirstPage = new javax.swing.JLabel();
        labelBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelMainTitle.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        labelMainTitle.setForeground(new java.awt.Color(255, 0, 0));
        labelMainTitle.setText("MANAGE STUDENT");
        panelBackGround.add(labelMainTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 470, 70));

        panelStudentDetail.setBackground(new java.awt.Color(153, 153, 255));
        panelStudentDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Student Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelStudentId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelStudentId.setText("Student ID");

        labelName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelName.setText("Name");

        labelAddress.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelAddress.setText("Address");

        labelTeleNo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTeleNo.setText("Tele. No");

        labelRegisterDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelRegisterDate.setText("Register Date");

        labelRegisterFee.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelRegisterFee.setText("Register Fee");

        textStudentId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStudentIdActionPerformed(evt);
            }
        });

        textName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNameActionPerformed(evt);
            }
        });

        textAddress.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textAddressActionPerformed(evt);
            }
        });

        textTeleNo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textTeleNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textTeleNoActionPerformed(evt);
            }
        });
        textTeleNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textTeleNoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textTeleNoKeyTyped(evt);
            }
        });

        textRegisterDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textRegisterDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textRegisterDateActionPerformed(evt);
            }
        });

        labelModifyStudent.setBackground(new java.awt.Color(204, 0, 0));
        labelModifyStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelModifyStudent.setForeground(new java.awt.Color(255, 255, 255));
        labelModifyStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelModifyStudent.setText("Modify Student");
        labelModifyStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelModifyStudent.setOpaque(true);
        labelModifyStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelModifyStudentMouseClicked(evt);
            }
        });

        labelRemoveStudent.setBackground(new java.awt.Color(204, 0, 0));
        labelRemoveStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelRemoveStudent.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveStudent.setText("Remove Student");
        labelRemoveStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelRemoveStudent.setOpaque(true);
        labelRemoveStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveStudentMouseClicked(evt);
            }
        });

        labelClear.setBackground(new java.awt.Color(204, 0, 0));
        labelClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelClear.setForeground(new java.awt.Color(255, 255, 255));
        labelClear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelClear.setText("Clear");
        labelClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelClear.setOpaque(true);
        labelClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelClearMouseClicked(evt);
            }
        });

        textRegisterFee.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textRegisterFee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textRegisterFeeKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panelStudentDetailLayout = new javax.swing.GroupLayout(panelStudentDetail);
        panelStudentDetail.setLayout(panelStudentDetailLayout);
        panelStudentDetailLayout.setHorizontalGroup(
            panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStudentDetailLayout.createSequentialGroup()
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelStudentDetailLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelRegisterDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelTeleNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelStudentId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelRegisterFee, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textTeleNo, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(textRegisterFee, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(textRegisterDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))))
                    .addGroup(panelStudentDetailLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(labelRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(labelModifyStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelStudentDetailLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(labelClear, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        panelStudentDetailLayout.setVerticalGroup(
            panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStudentDetailLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelTeleNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textTeleNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRegisterDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textRegisterDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRegisterFee, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textRegisterFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(panelStudentDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelModifyStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(labelClear, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        panelBackGround.add(panelStudentDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 150, 490, 540));

        panelClassDetail.setBackground(new java.awt.Color(153, 153, 255));
        panelClassDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Class Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelSubject.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelSubject.setText("Subject");

        labelGrade.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelGrade.setText("Grade");

        comboBoxSubject.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxSubject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSubjectItemStateChanged(evt);
            }
        });

        labelTeacher.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTeacher.setText("Teacher");

        tableClassDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Session ID", "Class ID", "Subject", "Teacher", "Grade", "Day", "Period"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableClassDetail);
        if (tableClassDetail.getColumnModel().getColumnCount() > 0) {
            tableClassDetail.getColumnModel().getColumn(3).setPreferredWidth(150);
            tableClassDetail.getColumnModel().getColumn(4).setPreferredWidth(50);
            tableClassDetail.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        labelDay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelDay.setText("Day");

        labelPeriod.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelPeriod.setText("Period");

        comboBoxDay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxDay.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxDayItemStateChanged(evt);
            }
        });
        comboBoxDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDayActionPerformed(evt);
            }
        });

        comboBoxPeriod.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPeriodActionPerformed(evt);
            }
        });

        labelClassId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelClassId.setText("Class ID");

        labelSessionId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelSessionId.setText("Session ID");

        textClassId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textClassId.setEnabled(false);

        textSessionId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textSessionId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSessionIdActionPerformed(evt);
            }
        });

        comboBoxTeacher.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTeacherActionPerformed(evt);
            }
        });

        labelStudentRegisterNewClass.setBackground(new java.awt.Color(204, 0, 0));
        labelStudentRegisterNewClass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelStudentRegisterNewClass.setForeground(new java.awt.Color(255, 255, 255));
        labelStudentRegisterNewClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStudentRegisterNewClass.setText("Student Register New Class");
        labelStudentRegisterNewClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelStudentRegisterNewClass.setOpaque(true);
        labelStudentRegisterNewClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelStudentRegisterNewClassMouseClicked(evt);
            }
        });

        labelStudentRemoveInClass.setBackground(new java.awt.Color(204, 0, 0));
        labelStudentRemoveInClass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelStudentRemoveInClass.setForeground(new java.awt.Color(255, 255, 255));
        labelStudentRemoveInClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStudentRemoveInClass.setText("Student Remove in Class");
        labelStudentRemoveInClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelStudentRemoveInClass.setOpaque(true);
        labelStudentRemoveInClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelStudentRemoveInClassMouseClicked(evt);
            }
        });

        comboBoxGrade.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxGrade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxGradeItemStateChanged(evt);
            }
        });
        comboBoxGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxGradeActionPerformed(evt);
            }
        });

        labelRegisterStudent.setBackground(new java.awt.Color(204, 0, 0));
        labelRegisterStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelRegisterStudent.setForeground(new java.awt.Color(255, 255, 255));
        labelRegisterStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRegisterStudent.setText("Register Student");
        labelRegisterStudent.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelRegisterStudent.setOpaque(true);
        labelRegisterStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRegisterStudentMouseClicked(evt);
            }
        });

        labelDiscribeRegisterNewClass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelDiscribeRegisterNewClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDiscribeRegisterNewClass.setText("Before click button , select row.");

        labelDiscribeRemoveInClass.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelDiscribeRemoveInClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDiscribeRemoveInClass.setText("Before click button , select row.");

        javax.swing.GroupLayout panelClassDetailLayout = new javax.swing.GroupLayout(panelClassDetail);
        panelClassDetail.setLayout(panelClassDetailLayout);
        panelClassDetailLayout.setHorizontalGroup(
            panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClassDetailLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClassDetailLayout.createSequentialGroup()
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelClassDetailLayout.createSequentialGroup()
                                .addComponent(comboBoxTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelClassId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelSessionId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textSessionId, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(textClassId)))
                            .addComponent(comboBoxSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(panelClassDetailLayout.createSequentialGroup()
                            .addComponent(labelPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(comboBoxPeriod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(panelClassDetailLayout.createSequentialGroup()
                            .addComponent(labelDay, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(comboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(57, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelClassDetailLayout.createSequentialGroup()
                .addGap(0, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelClassDetailLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(labelRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelDiscribeRegisterNewClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelStudentRegisterNewClass, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelDiscribeRemoveInClass, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelClassDetailLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(labelStudentRemoveInClass, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelClassDetailLayout.setVerticalGroup(
            panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelClassDetailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelClassDetailLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelClassId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textClassId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelClassDetailLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelDay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDiscribeRegisterNewClass)
                    .addComponent(labelDiscribeRemoveInClass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(panelClassDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRegisterStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelStudentRegisterNewClass, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelStudentRemoveInClass, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        panelBackGround.add(panelClassDetail, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 150, 730, 540));

        labelBackToFirstPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gif/home-animated-blue-1.gif"))); // NOI18N
        labelBackToFirstPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackToFirstPageMouseClicked(evt);
            }
        });
        panelBackGround.add(labelBackToFirstPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 90));

        labelBackGround.setBackground(new java.awt.Color(0, 0, 153));
        labelBackGround.setOpaque(true);
        panelBackGround.add(labelBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelRegisterStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRegisterStudentMouseClicked
        addStudent();
        printForm();
    }//GEN-LAST:event_labelRegisterStudentMouseClicked

    private void labelModifyStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelModifyStudentMouseClicked
        modifyStudent();
    }//GEN-LAST:event_labelModifyStudentMouseClicked

    private void labelRemoveStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveStudentMouseClicked
        removeStudent();
    }//GEN-LAST:event_labelRemoveStudentMouseClicked

    private void textStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStudentIdActionPerformed
        searchStudent();
    }//GEN-LAST:event_textStudentIdActionPerformed

    private void textNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNameActionPerformed
        textAddress.requestFocus();
    }//GEN-LAST:event_textNameActionPerformed

    private void textAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textAddressActionPerformed
        textTeleNo.requestFocus();
    }//GEN-LAST:event_textAddressActionPerformed

    private void textTeleNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTeleNoActionPerformed
        textRegisterDate.requestFocus();
    }//GEN-LAST:event_textTeleNoActionPerformed

    private void textRegisterDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textRegisterDateActionPerformed
        textRegisterFee.requestFocus();
    }//GEN-LAST:event_textRegisterDateActionPerformed

    private void comboBoxDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxDayActionPerformed

    private void comboBoxSubjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSubjectItemStateChanged

        String subject = (String) comboBoxSubject.getSelectedItem();
        comboBoxGrade.removeAllItems();
        ArrayList<Integer> classGrades;
        try {
            classGrades = ClassDetailController.searchClassDetailBySubject(subject);
            for (int grade : classGrades) {
                comboBoxGrade.addItem(Integer.toString(grade));
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxSubjectItemStateChanged

    private void comboBoxGradeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxGradeItemStateChanged

    }//GEN-LAST:event_comboBoxGradeItemStateChanged

    private void comboBoxGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxGradeActionPerformed

        String subject = (String) comboBoxSubject.getSelectedItem();
        String grade = (String) comboBoxGrade.getSelectedItem();
        comboBoxTeacher.removeAllItems();
        ArrayList<String> teachersList;
        try {
            teachersList = ClassDetailController.searchClassDetailBySubjectGrade(subject, grade);
            for (String teacher : teachersList) {
                comboBoxTeacher.addItem(teacher);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxGradeActionPerformed

    private void comboBoxTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTeacherActionPerformed
        String subject = (String) comboBoxSubject.getSelectedItem();
        String grade = (String) comboBoxGrade.getSelectedItem();
        String teacher = (String) comboBoxTeacher.getSelectedItem();
        comboBoxDay.removeAllItems();
        ArrayList<String> dayList;
        try {
            dayList = ClassDetailController.searchClassDetailBySubjectGradeTeacher(subject, grade, teacher);
            for (String day : dayList) {
                comboBoxDay.addItem(day);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxTeacherActionPerformed

    private void comboBoxPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPeriodActionPerformed
        String subject = (String) comboBoxSubject.getSelectedItem();
        String grade = (String) comboBoxGrade.getSelectedItem();
        String teacher = (String) comboBoxTeacher.getSelectedItem();
        String day = (String) comboBoxDay.getSelectedItem();
        String period = (String) comboBoxPeriod.getSelectedItem();
        try {
            String classId = ClassDetailController.searchClassDetailBySubjectGradeTeacherDayPeriod(subject, grade, teacher, day, period);
            textClassId.setText(classId);
            textSessionId.requestFocus();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxPeriodActionPerformed

    private void textSessionIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSessionIdActionPerformed
        String sessionId = textSessionId.getText();
        String classId = textClassId.getText();
        String subject = (String) comboBoxSubject.getSelectedItem();
        String grade = (String) comboBoxGrade.getSelectedItem();
        String teacher = (String) comboBoxTeacher.getSelectedItem();
        String day = (String) comboBoxDay.getSelectedItem();
        String period = (String) comboBoxPeriod.getSelectedItem();
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        defaultTableModel.addRow(new Object[]{sessionId, classId, subject, teacher, grade, day, period});
        generateNextSessionId();
    }//GEN-LAST:event_textSessionIdActionPerformed

    private void labelStudentRegisterNewClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelStudentRegisterNewClassMouseClicked
        try {
            addNewClassDetailToSession();
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Select row.");
        }

    }//GEN-LAST:event_labelStudentRegisterNewClassMouseClicked

    private void labelStudentRemoveInClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelStudentRemoveInClassMouseClicked
        try {
            deleteClassDetailAtSession();
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelStudentRemoveInClassMouseClicked

    private void labelClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseClicked
        clearTextFieldAndTable();
    }//GEN-LAST:event_labelClearMouseClicked

    private void textTeleNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTeleNoKeyReleased
        String teleNo = textTeleNo.getText();
        int numberOfTeleNo = teleNo.length();
        if (numberOfTeleNo == 10) {
            textRegisterDate.requestFocus();
        }
    }//GEN-LAST:event_textTeleNoKeyReleased

    private void textRegisterFeeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textRegisterFeeKeyTyped
        ValidationController.decimalNumbersOnlyTextFiled(evt);
    }//GEN-LAST:event_textRegisterFeeKeyTyped

    private void textTeleNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTeleNoKeyTyped
        ValidationController.NumbersOnlyTextFiled(evt);
    }//GEN-LAST:event_textTeleNoKeyTyped

    private void comboBoxDayItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxDayItemStateChanged
        String subject = (String) comboBoxSubject.getSelectedItem();
        String grade = (String) comboBoxGrade.getSelectedItem();
        String teacher = (String) comboBoxTeacher.getSelectedItem();
        String day = (String) comboBoxDay.getSelectedItem();
        comboBoxPeriod.removeAllItems();
        ArrayList<String> periodList;
        try {
            periodList = ClassDetailController.searchClassDetailBySubjectGradeTeacherDay(subject, grade, teacher, day);
            for (String period : periodList) {
                comboBoxPeriod.addItem(period);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxDayItemStateChanged

    private void labelBackToFirstPageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackToFirstPageMouseClicked
        new FirstPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_labelBackToFirstPageMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageStudent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxDay;
    private javax.swing.JComboBox comboBoxGrade;
    private javax.swing.JComboBox comboBoxPeriod;
    private javax.swing.JComboBox comboBoxSubject;
    private javax.swing.JComboBox comboBoxTeacher;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAddress;
    private javax.swing.JLabel labelBackGround;
    private javax.swing.JLabel labelBackToFirstPage;
    private javax.swing.JLabel labelClassId;
    private javax.swing.JLabel labelClear;
    private javax.swing.JLabel labelDay;
    private javax.swing.JLabel labelDiscribeRegisterNewClass;
    private javax.swing.JLabel labelDiscribeRemoveInClass;
    private javax.swing.JLabel labelGrade;
    private javax.swing.JLabel labelMainTitle;
    private javax.swing.JLabel labelModifyStudent;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPeriod;
    private javax.swing.JLabel labelRegisterDate;
    private javax.swing.JLabel labelRegisterFee;
    private javax.swing.JLabel labelRegisterStudent;
    private javax.swing.JLabel labelRemoveStudent;
    private javax.swing.JLabel labelSessionId;
    private javax.swing.JLabel labelStudentId;
    private javax.swing.JLabel labelStudentRegisterNewClass;
    private javax.swing.JLabel labelStudentRemoveInClass;
    private javax.swing.JLabel labelSubject;
    private javax.swing.JLabel labelTeacher;
    private javax.swing.JLabel labelTeleNo;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelClassDetail;
    private javax.swing.JPanel panelStudentDetail;
    private javax.swing.JTable tableClassDetail;
    private javax.swing.JTextField textAddress;
    private javax.swing.JTextField textClassId;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textRegisterDate;
    private javax.swing.JTextField textRegisterFee;
    private javax.swing.JTextField textSessionId;
    private javax.swing.JTextField textStudentId;
    private javax.swing.JTextField textTeleNo;
    // End of variables declaration//GEN-END:variables

    private void addStudent() {
        if (ckeckAllTextField()) {
            ArrayList<Session> sessionList = new ArrayList<>();
            DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
            String studentId = textStudentId.getText();
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String classId = (String) defaultTableModel.getValueAt(i, 1);
                String sessionId = (String) defaultTableModel.getValueAt(i, 0);
                Session session = new Session(studentId, classId, sessionId);
                sessionList.add(session);
            }
            String studentName = textName.getText();
            String address = textAddress.getText();
            int teleNo = Integer.parseInt(textTeleNo.getText());
            String registerDate = textRegisterDate.getText();
            double registerFee = Double.parseDouble(textRegisterFee.getText());
            Student student = new Student(studentId, studentName, address, teleNo, registerDate, registerFee);
            try {
                boolean isAdded = StudentController.addStudent(student, sessionList);
                if (isAdded) {
                    JOptionPane.showMessageDialog(this, "Added Success!");
                } else {
                    JOptionPane.showMessageDialog(this, "Added Fail!");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "SID is duplicate!\nPlease enter correct SID...!");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Check whether you have filled all text field!");
        }

    }

    private void modifyStudent() {
        Student student = new Student(textStudentId.getText(), textName.getText(), textAddress.getText(), Integer.parseInt(textTeleNo.getText()), textRegisterDate.getText(), Double.parseDouble(textRegisterFee.getText()));
        try {
            boolean isUpdated = StudentController.updateStudent(student);
            if (isUpdated) {
                JOptionPane.showMessageDialog(this, "Student detail updated...");
            } else {
                JOptionPane.showMessageDialog(this, "Update Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeStudent() {
        String sid = textStudentId.getText();
        try {
            boolean isDeleted = StudentController.deleteStudent(sid);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Student detail deleted...");
            } else {
                JOptionPane.showMessageDialog(this, "Delete Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchStudent() {
        String sid = textStudentId.getText();
        try {
            Student student = StudentController.searchStudent(sid);
            if (student != null) {
                String name = student.getName();
                String address = student.getAddress();
                int teleNo = student.getTele_no();
                String registerDate = student.getRegister_date();
                double registerFee = student.getRegister_fee();
                textName.setText(name);
                textAddress.setText(address);
                textTeleNo.setText(Integer.toString(teleNo));
                textRegisterDate.setText(registerDate);
                textRegisterFee.setText(Double.toString(registerFee));
                searchClass();
            } else {
                textName.requestFocus();
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchClass() {
        String studetId = textStudentId.getText();
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        defaultTableModel.setRowCount(0);
        ArrayList<Session> sessions;
        try {
            sessions = SessionController.searchSessionFromSID(studetId);
            for (Session session : sessions) {
                String classId = session.getCID();
                ClassDetail classDetail = ClassDetailController.searchClassDetail(classId);
                String suject = classDetail.getSuject();
                String teacher = classDetail.getTeacher();
                String grade = classDetail.getGrade();
                String day = classDetail.getDay();
                String period = classDetail.getPeriod();
                defaultTableModel.addRow(new Object[]{session.getSEID(), classId, suject, teacher, grade, day, period});
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllClassSubjectToArrayList() {
        ArrayList<String> allClassSubject;
        try {
            allClassSubject = ClassDetailController.searchSubject();
            for (String subject : allClassSubject) {
                comboBoxSubject.addItem(subject);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addNewClassDetailToSession() {
        int index = tableClassDetail.getSelectedRow();
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        String seid = (String) defaultTableModel.getValueAt(index, 0);
        String cid = (String) defaultTableModel.getValueAt(index, 1);
        Session session = new Session(textStudentId.getText(), cid, seid);
        try {
            boolean isAdded = SessionController.addSession(session);
            if (isAdded) {
                JOptionPane.showMessageDialog(this, "Added success...");
            } else {
                JOptionPane.showMessageDialog(this, "Added fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Session ID is duplicated.");
        }
    }

    private void deleteClassDetailAtSession() {
        int index = tableClassDetail.getSelectedRow();
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        String seid = (String) defaultTableModel.getValueAt(index, 0);
        try {
            boolean isDeleted = SessionController.deleteSession(seid);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Class detail deleted...");
                removeSelectedClass();
            } else {
                JOptionPane.showMessageDialog(this, "Delete Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeSelectedClass() {
        int index = tableClassDetail.getSelectedRow();
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        defaultTableModel.removeRow(index);
    }

    private void loadDate() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String date = dateFormat.format(new Date());
        textRegisterDate.setText(date);
    }

    private void clearTextFieldAndTable() {
        textStudentId.setText("");
        textName.setText("");
        textAddress.setText("");
        textTeleNo.setText("");
        loadDate();
        textRegisterFee.setText("");
        textSessionId.setText("");
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        defaultTableModel.setRowCount(0);
        generateStudentId();
        generateSessionId();
        textStudentId.requestFocus();
    }

    private boolean ckeckAllTextField() {
        boolean fillStudentId = textStudentId.getText().isEmpty();
        boolean fillStudentName = textName.getText().isEmpty();
        boolean fillAddress = textAddress.getText().isEmpty();
        boolean fillTeleNo = textTeleNo.getText().isEmpty();
        boolean fillRegisterDate = textRegisterDate.getText().isEmpty();
        boolean fillRegisterFee = textRegisterFee.getText().isEmpty();
        if (fillStudentId || fillStudentName || fillAddress || fillTeleNo || fillRegisterDate || fillRegisterFee) {
            return false;
        } else {
            return true;
        }
    }

    private void generateStudentId() {
        String studentId = null;
        try {
            studentId = GenerateIdController.lastTableId("SID", "Student");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (studentId != null) {
            int idLenght = studentId.length();
            String idNumber = studentId.substring(1, idLenght);
            int idNumberInteger = Integer.parseInt(idNumber);
            int nextNumber = idNumberInteger + 1;

            if (nextNumber < 10) {
                textStudentId.setText("s00" + nextNumber);
            }
            if (nextNumber >= 10 & nextNumber < 100) {
                textStudentId.setText("s0" + nextNumber);
            }
            if (nextNumber >= 100) {
                textStudentId.setText("s" + nextNumber);
            }
        } else {
            textStudentId.setText("s001");
        }
    }

    private void generateSessionId() {
        String sessionId = null;
        try {
            sessionId = GenerateIdController.lastTableId("SEID", "Session");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (sessionId != null) {
            int idLenght = sessionId.length();
            String idNumber = sessionId.substring(2, idLenght);
            int idNumberInteger = Integer.parseInt(idNumber);
            int nextNumber = idNumberInteger + 1;

            if (nextNumber < 10) {
                textSessionId.setText("se00" + nextNumber);
            }
            if (nextNumber >= 10 & nextNumber < 100) {
                textSessionId.setText("se0" + nextNumber);
            }
            if (nextNumber >= 100) {
                textSessionId.setText("se" + nextNumber);
            }
        } else {
            textSessionId.setText("se001");
        }
    }

    private void generateNextSessionId() {
        DefaultTableModel defaultTableModel = (DefaultTableModel) tableClassDetail.getModel();
        int rowCount = tableClassDetail.getRowCount();
        String sessionId = (String) defaultTableModel.getValueAt(rowCount - 1, 0);
        if (sessionId != null) {
            int idLenght = sessionId.length();
            String idNumber = sessionId.substring(2, idLenght);
            int idNumberInteger = Integer.parseInt(idNumber);
            int nextNumber = idNumberInteger + 1;

            if (nextNumber < 10) {
                textSessionId.setText("se00" + nextNumber);
            }
            if (nextNumber >= 10 & nextNumber < 100) {
                textSessionId.setText("se0" + nextNumber);
            }
            if (nextNumber >= 100) {
                textSessionId.setText("se" + nextNumber);
            }
        } else {
            textSessionId.setText("se001");
        }
    }

    private void printForm() {
        InputStream inputStream = getClass().getResourceAsStream("registerStudent.jrxml");
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String studentId = textStudentId.getText();
            String studentName = textName.getText();
            String address = textAddress.getText();
            String teleNo = textTeleNo.getText();
            String registerDate = textRegisterDate.getText();
            String registerFee = textRegisterFee.getText();
            hashMap.put("studentId", studentId);
            hashMap.put("name", studentName);
            hashMap.put("address", address);
            hashMap.put("telephoneNo", teleNo);
            hashMap.put("registerDate", registerDate);
            hashMap.put("registerFee", registerFee);
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableClassDetail.getModel()));
            //   JasperViewer.viewReport(jp);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(this, true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ManageStudent.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
