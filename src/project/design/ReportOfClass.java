/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.design;

import java.io.InputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import project.controller.AttendanceController;
import project.controller.ClassDetailController;
import project.controller.ExamController;
import project.controller.PaymentController;
import project.controller.ResultController;
import project.controller.SessionController;
import project.controller.StudentController;
import project.model.Attendance;
import project.model.ClassDetail;
import project.model.Exam;
import project.model.Payment;
import project.model.Result;
import project.model.Session;
import project.model.Student;

/**
 *
 * @author 
 */
public class ReportOfClass extends javax.swing.JPanel {

    /**
     * Creates new form ReportOfClass
     */
    public ReportOfClass() {
        initComponents();
        loadAllClassDetail();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneClass = new javax.swing.JScrollPane();
        tableClass = new javax.swing.JTable();
        scrollPaneStudent = new javax.swing.JScrollPane();
        tableStudent = new javax.swing.JTable();
        labelShowStudentDetail = new javax.swing.JLabel();
        scrollPanePayment = new javax.swing.JScrollPane();
        tablePayment = new javax.swing.JTable();
        scrollPaneAttendance = new javax.swing.JScrollPane();
        tableAttendance = new javax.swing.JTable();
        scrollPaneExam = new javax.swing.JScrollPane();
        tableExam = new javax.swing.JTable();
        labelDetail = new javax.swing.JLabel();
        labelAllClassDetail = new javax.swing.JLabel();
        labelAllStudent = new javax.swing.JLabel();
        labelPaymentDetail = new javax.swing.JLabel();
        labelAttendanceDetail = new javax.swing.JLabel();
        labelExamDetail = new javax.swing.JLabel();
        labelPrintAllClassDetail = new javax.swing.JLabel();
        labelPrintStudentInClass = new javax.swing.JLabel();
        labelPrintStudentPayment = new javax.swing.JLabel();
        labelPrintStudentAttendance = new javax.swing.JLabel();
        labelPrintStudentExamDetail = new javax.swing.JLabel();

        setOpaque(false);

        tableClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Subject", "Teacher", "Grade", "Day", "Period"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClassMouseClicked(evt);
            }
        });
        scrollPaneClass.setViewportView(tableClass);
        if (tableClass.getColumnModel().getColumnCount() > 0) {
            tableClass.getColumnModel().getColumn(0).setPreferredWidth(60);
            tableClass.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableClass.getColumnModel().getColumn(2).setPreferredWidth(125);
            tableClass.getColumnModel().getColumn(3).setPreferredWidth(40);
            tableClass.getColumnModel().getColumn(4).setPreferredWidth(75);
            tableClass.getColumnModel().getColumn(5).setPreferredWidth(110);
        }

        tableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Session ID", "Student ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableStudentMouseClicked(evt);
            }
        });
        scrollPaneStudent.setViewportView(tableStudent);
        if (tableStudent.getColumnModel().getColumnCount() > 0) {
            tableStudent.getColumnModel().getColumn(2).setPreferredWidth(150);
        }

        labelShowStudentDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Entypo_e75e(0)_64.png"))); // NOI18N
        labelShowStudentDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelShowStudentDetailMouseClicked(evt);
            }
        });

        tablePayment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment ID", "Fee", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPanePayment.setViewportView(tablePayment);

        tableAttendance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Attendance ID", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPaneAttendance.setViewportView(tableAttendance);

        tableExam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Exam ID", "Exam Name", "Date", "Marks", "State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        scrollPaneExam.setViewportView(tableExam);
        if (tableExam.getColumnModel().getColumnCount() > 0) {
            tableExam.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        labelDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Entypo_e75c(1)_64.png"))); // NOI18N
        labelDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelDetailMouseClicked(evt);
            }
        });

        labelAllClassDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelAllClassDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAllClassDetail.setText("All Class Detail");

        labelAllStudent.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelAllStudent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAllStudent.setText("Student Detail");

        labelPaymentDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelPaymentDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPaymentDetail.setText("Payment Detail");

        labelAttendanceDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelAttendanceDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAttendanceDetail.setText("Attendance Detail");

        labelExamDetail.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        labelExamDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExamDetail.setText("Exam Detail");

        labelPrintAllClassDetail.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintAllClassDetail.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelPrintAllClassDetail.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintAllClassDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintAllClassDetail.setText("Print");
        labelPrintAllClassDetail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintAllClassDetail.setOpaque(true);
        labelPrintAllClassDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintAllClassDetailMouseClicked(evt);
            }
        });

        labelPrintStudentInClass.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentInClass.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelPrintStudentInClass.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentInClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentInClass.setText("Print");
        labelPrintStudentInClass.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentInClass.setOpaque(true);
        labelPrintStudentInClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentInClassMouseClicked(evt);
            }
        });

        labelPrintStudentPayment.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentPayment.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelPrintStudentPayment.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentPayment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentPayment.setText("Print");
        labelPrintStudentPayment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentPayment.setOpaque(true);
        labelPrintStudentPayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentPaymentMouseClicked(evt);
            }
        });

        labelPrintStudentAttendance.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentAttendance.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelPrintStudentAttendance.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentAttendance.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentAttendance.setText("Print");
        labelPrintStudentAttendance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentAttendance.setOpaque(true);
        labelPrintStudentAttendance.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentAttendanceMouseClicked(evt);
            }
        });

        labelPrintStudentExamDetail.setBackground(new java.awt.Color(255, 0, 0));
        labelPrintStudentExamDetail.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        labelPrintStudentExamDetail.setForeground(new java.awt.Color(255, 255, 255));
        labelPrintStudentExamDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrintStudentExamDetail.setText("Print");
        labelPrintStudentExamDetail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelPrintStudentExamDetail.setOpaque(true);
        labelPrintStudentExamDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelPrintStudentExamDetailMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(scrollPanePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scrollPaneAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scrollPaneExam, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPaneClass)
                        .addGap(18, 18, 18)
                        .addComponent(labelShowStudentDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPaneStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60))
            .addGroup(layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(labelAllClassDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelAllStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(239, 239, 239)
                .addComponent(labelPrintAllClassDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(labelPrintStudentInClass, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(labelPaymentDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134)
                .addComponent(labelAttendanceDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(200, 200, 200)
                .addComponent(labelExamDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(labelPrintStudentPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186)
                .addComponent(labelPrintStudentAttendance, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelPrintStudentExamDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(253, 253, 253))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAllStudent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelAllClassDetail))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollPaneStudent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scrollPaneClass, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(labelShowStudentDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPrintAllClassDetail)
                    .addComponent(labelPrintStudentInClass))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPaymentDetail)
                    .addComponent(labelAttendanceDetail)
                    .addComponent(labelExamDetail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(scrollPaneAttendance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(scrollPanePayment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrollPaneExam, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPrintStudentPayment)
                    .addComponent(labelPrintStudentAttendance)
                    .addComponent(labelPrintStudentExamDetail))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void labelShowStudentDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelShowStudentDetailMouseClicked
        try{
            searchSessions();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelShowStudentDetailMouseClicked

    private void tableClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClassMouseClicked
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        defaultTableModelStudent.setRowCount(0);
        DefaultTableModel defaultTableModelPayment=(DefaultTableModel) tablePayment.getModel();
        defaultTableModelPayment.setRowCount(0);
        DefaultTableModel defaultTableModelAttendance=(DefaultTableModel) tableAttendance.getModel();
        defaultTableModelAttendance.setRowCount(0);
        DefaultTableModel defaultTableModelExam=(DefaultTableModel) tableExam.getModel();
        defaultTableModelExam.setRowCount(0);
    }//GEN-LAST:event_tableClassMouseClicked

    private void labelDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelDetailMouseClicked
        try{
            searchStudent();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelDetailMouseClicked

    private void tableStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableStudentMouseClicked
        DefaultTableModel defaultTableModelPayment=(DefaultTableModel) tablePayment.getModel();
        defaultTableModelPayment.setRowCount(0);
        DefaultTableModel defaultTableModelAttendance=(DefaultTableModel) tableAttendance.getModel();
        defaultTableModelAttendance.setRowCount(0);
        DefaultTableModel defaultTableModelExam=(DefaultTableModel) tableExam.getModel();
        defaultTableModelExam.setRowCount(0);
    }//GEN-LAST:event_tableStudentMouseClicked

    private void labelPrintAllClassDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintAllClassDetailMouseClicked
        printAllClassDetail();
    }//GEN-LAST:event_labelPrintAllClassDetailMouseClicked

    private void labelPrintStudentInClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentInClassMouseClicked
        try{
            printStudentInClass();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelPrintStudentInClassMouseClicked

    private void labelPrintStudentPaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentPaymentMouseClicked
        try{
            printStudentPayment();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row");
        }
    }//GEN-LAST:event_labelPrintStudentPaymentMouseClicked

    private void labelPrintStudentAttendanceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentAttendanceMouseClicked
        try{
            printStudentAttendance();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row");
        }
    }//GEN-LAST:event_labelPrintStudentAttendanceMouseClicked

    private void labelPrintStudentExamDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrintStudentExamDetailMouseClicked
        try{
            printStudentExamDetail();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row");
        }
    }//GEN-LAST:event_labelPrintStudentExamDetailMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelAllClassDetail;
    private javax.swing.JLabel labelAllStudent;
    private javax.swing.JLabel labelAttendanceDetail;
    private javax.swing.JLabel labelDetail;
    private javax.swing.JLabel labelExamDetail;
    private javax.swing.JLabel labelPaymentDetail;
    private javax.swing.JLabel labelPrintAllClassDetail;
    private javax.swing.JLabel labelPrintStudentAttendance;
    private javax.swing.JLabel labelPrintStudentExamDetail;
    private javax.swing.JLabel labelPrintStudentInClass;
    private javax.swing.JLabel labelPrintStudentPayment;
    private javax.swing.JLabel labelShowStudentDetail;
    private javax.swing.JScrollPane scrollPaneAttendance;
    private javax.swing.JScrollPane scrollPaneClass;
    private javax.swing.JScrollPane scrollPaneExam;
    private javax.swing.JScrollPane scrollPanePayment;
    private javax.swing.JScrollPane scrollPaneStudent;
    private javax.swing.JTable tableAttendance;
    private javax.swing.JTable tableClass;
    private javax.swing.JTable tableExam;
    private javax.swing.JTable tablePayment;
    private javax.swing.JTable tableStudent;
    // End of variables declaration//GEN-END:variables

    private void loadAllClassDetail() {
        ArrayList<ClassDetail> allClassDetails;
        try {
            allClassDetails=ClassDetailController.getAllClass();
            DefaultTableModel defaultTableModel=(DefaultTableModel) tableClass.getModel();
            defaultTableModel.setRowCount(0);
            for (ClassDetail classDetail : allClassDetails) {
                Object[] rowData={classDetail.getCID(), classDetail.getSuject(), classDetail.getTeacher(), classDetail.getGrade(), classDetail.getDay(), classDetail.getPeriod()};
                defaultTableModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    private void searchSessions() {
        int rowNumber=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        String classId=(String) defaultTableModelClass.getValueAt(rowNumber, 0);
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        defaultTableModelStudent.setRowCount(0);
        ArrayList<Session> sessionList;
        try {
            sessionList=SessionController.searchSessionFromCID(classId);
            for (Session session : sessionList) {                
                viewStudentDetail(session);                
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

    private void viewStudentDetail(Session session) {
        String studentId=session.getSID();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableStudent.getModel();
        try {
            Student student=StudentController.searchStudent(studentId);
            Object[] rowData={session.getSEID(), student.getSID(), student.getName()};
            defaultTableModel.addRow(rowData);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchStudent() {
        int rowNumber=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();        
        String sessionId=(String) defaultTableModelStudent.getValueAt(rowNumber, 0);
        DefaultTableModel defaultTableModelPayment=(DefaultTableModel) tablePayment.getModel();
        defaultTableModelPayment.setRowCount(0);
        DefaultTableModel defaultTableModelAttendance=(DefaultTableModel) tableAttendance.getModel();
        defaultTableModelAttendance.setRowCount(0);
        DefaultTableModel defaultTableModelResult=(DefaultTableModel) tableExam.getModel();
        defaultTableModelResult.setRowCount(0);
        viewAllPayment(sessionId);
        viewAllAttendance(sessionId);
        viewAllResult(sessionId);
    }

    private void viewAllPayment(String sessionId) {
        ArrayList<Payment> allPayments;
        DefaultTableModel defaultTableModel=(DefaultTableModel) tablePayment.getModel();        
        try {
            allPayments=PaymentController.viewPayment(sessionId);
            for (Payment payment : allPayments) {
                Object[] rowData={payment.getPID(), payment.getFee(), payment.getDate()};
                defaultTableModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllAttendance(String sessionId) {
        ArrayList<Attendance> allAttendances;
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableAttendance.getModel();
        try {
            allAttendances=AttendanceController.viewAttendanceOfSEID(sessionId);
            for (Attendance attendance : allAttendances) {
                Object[] rowData={attendance.getAID(), attendance.getDate()};
                defaultTableModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllResult(String sessionId) {
        ArrayList<Result> allResults;
        try {
            allResults=ResultController.viewResult(sessionId);
            for (Result result : allResults) {
                viewAllExam(result.getEID(), result.getMark(), result.getState());
            }
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void viewAllExam(String examId, String mark, String state) {
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableExam.getModel();
        try {
            Exam exam=ExamController.searchExam(examId);
            String examName=exam.getExam_name();
            String date=exam.getDate();
            Object[] rowData={examId, examName, date, mark, state};
            defaultTableModel.addRow(rowData);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printAllClassDetail() {
        InputStream inputStream = getClass().getResourceAsStream("allClassDetail_1.jrxml");
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap<String, Object>(), new JRTableModelDataSource(tableClass.getModel()));
            //   JasperViewer.viewReport(jp);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentInClass() {
        InputStream inputStream = getClass().getResourceAsStream("studentInClass.jrxml");
        int rowNumber=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumber, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumber, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumber, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumber, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumber, 5);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableStudent.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentPayment() {
        InputStream inputStream = getClass().getResourceAsStream("studentPayment.jrxml");
        int rowNumberClass=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        int rowNumberStudent=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumberClass, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumberClass, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumberClass, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumberClass, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumberClass, 5);
            
            String studentId = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 1);
            String studentName = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 2);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tablePayment.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentAttendance() {
        InputStream inputStream = getClass().getResourceAsStream("studentAttendance.jrxml");
        int rowNumberClass=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        int rowNumberStudent=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumberClass, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumberClass, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumberClass, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumberClass, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumberClass, 5);
            
            String studentId = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 1);
            String studentName = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 2);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableAttendance.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printStudentExamDetail() {
        InputStream inputStream = getClass().getResourceAsStream("studentExamDetail.jrxml");
        int rowNumberClass=tableClass.getSelectedRow();
        DefaultTableModel defaultTableModelClass=(DefaultTableModel) tableClass.getModel();
        int rowNumberStudent=tableStudent.getSelectedRow();
        DefaultTableModel defaultTableModelStudent=(DefaultTableModel) tableStudent.getModel();
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport(inputStream);
            HashMap<String, Object> hashMap = new HashMap<String, Object>();
            String subject = (String) defaultTableModelClass.getValueAt(rowNumberClass, 1);
            String teacher = (String) defaultTableModelClass.getValueAt(rowNumberClass, 2);
            String grade = (String) defaultTableModelClass.getValueAt(rowNumberClass, 3);
            String day = (String) defaultTableModelClass.getValueAt(rowNumberClass, 4);
            String period = (String) defaultTableModelClass.getValueAt(rowNumberClass, 5);
            
            String studentId = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 1);
            String studentName = (String) defaultTableModelStudent.getValueAt(rowNumberStudent, 2);
            
            hashMap.put("subject", subject);
            hashMap.put("teacher", teacher);
            hashMap.put("grade", grade);
            hashMap.put("day", day);
            hashMap.put("period", period);
            hashMap.put("studentId", studentId);
            hashMap.put("studentName", studentName);
            
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, hashMap, new JRTableModelDataSource(tableExam.getModel()));            
            JasperViewer jasperViewer = new JasperViewer(jasperPrint);
            PrintDialog printDialog = new PrintDialog(new Report(), true);
            printDialog.setContentPane(jasperViewer.getContentPane());
            printDialog.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(ReportOfClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
