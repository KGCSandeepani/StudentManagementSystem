/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.design;

import java.sql.SQLException;
import java.text.DateFormatSymbols;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import project.controller.ClassController;
import project.controller.ClassDetailController;
import project.controller.GenerateIdController;
import project.controller.GradeController;
import project.controller.SubjectController;
import project.controller.TeacherController;
import project.model.Classes;
import project.model.Grade;
import project.model.Subject;
import project.model.Teacher;

/**
 *
 * @author 
 */
public class ManageClass extends javax.swing.JFrame {

    /**
     * Creates new form ManageClass
     */
    
    
    public ManageClass() {
        initComponents();
        generateClassId();
        loadAllSubject();
        loadAllGrade();
        loadAllDay();
        loadAllClassSubject();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        labelManageClass = new javax.swing.JLabel();
        panelRegisterNewClass = new javax.swing.JPanel();
        labelSubject = new javax.swing.JLabel();
        labelGrade = new javax.swing.JLabel();
        labelTeacher = new javax.swing.JLabel();
        labelDay = new javax.swing.JLabel();
        labelPeriod = new javax.swing.JLabel();
        labelClassId = new javax.swing.JLabel();
        textClassId = new javax.swing.JTextField();
        textPeriod = new javax.swing.JTextField();
        comboBoxSubject = new javax.swing.JComboBox();
        comboBoxGrade = new javax.swing.JComboBox();
        labelRegisterNewClass = new javax.swing.JLabel();
        textTeacher = new javax.swing.JTextField();
        comboBoxDay = new javax.swing.JComboBox();
        panelSearchClass = new javax.swing.JPanel();
        labelSubjectOfSearch = new javax.swing.JLabel();
        labelGradeOfSearch = new javax.swing.JLabel();
        labelTeacherOfSearch = new javax.swing.JLabel();
        labelDayOfSearch = new javax.swing.JLabel();
        labelPeriodOfSearch = new javax.swing.JLabel();
        comboBoxSubjectOfSearch = new javax.swing.JComboBox();
        comboBoxGradeOfSearch = new javax.swing.JComboBox();
        comboBoxTeacherOfSearch = new javax.swing.JComboBox();
        comboBoxDayOfSearch = new javax.swing.JComboBox();
        labelClassIdOfSearch = new javax.swing.JLabel();
        labeModifyClassDetail = new javax.swing.JLabel();
        labelRemoveClassDetail = new javax.swing.JLabel();
        textClassIdOfSearch = new javax.swing.JTextField();
        comboBoxPeriodOfSearch = new javax.swing.JComboBox();
        textTeacherOfChange = new javax.swing.JTextField();
        textPeriodOfChange = new javax.swing.JTextField();
        comboBoxSubjectOfChange = new javax.swing.JComboBox();
        comboBoxGradeOfChange = new javax.swing.JComboBox();
        comboBoxDayOfChange = new javax.swing.JComboBox();
        labelDiscribe = new javax.swing.JLabel();
        labelBackToFirstPage = new javax.swing.JLabel();
        labelBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelManageClass.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        labelManageClass.setForeground(new java.awt.Color(255, 0, 51));
        labelManageClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelManageClass.setText("Manage Class");
        panelBackGround.add(labelManageClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 34, 530, 60));

        panelRegisterNewClass.setBackground(new java.awt.Color(153, 153, 255));
        panelRegisterNewClass.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Register New Class", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelSubject.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelSubject.setText("Subject");

        labelGrade.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelGrade.setText("Grade");

        labelTeacher.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTeacher.setText("Teacher");

        labelDay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelDay.setText("Day");

        labelPeriod.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelPeriod.setText("Period");

        labelClassId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelClassId.setText("Class ID");

        textClassId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        textPeriod.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        comboBoxSubject.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        comboBoxGrade.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        labelRegisterNewClass.setBackground(new java.awt.Color(255, 0, 0));
        labelRegisterNewClass.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        labelRegisterNewClass.setForeground(new java.awt.Color(255, 255, 255));
        labelRegisterNewClass.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRegisterNewClass.setText("Register New Class");
        labelRegisterNewClass.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelRegisterNewClass.setOpaque(true);
        labelRegisterNewClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRegisterNewClassMouseClicked(evt);
            }
        });

        textTeacher.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textTeacher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textTeacherKeyReleased(evt);
            }
        });

        comboBoxDay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout panelRegisterNewClassLayout = new javax.swing.GroupLayout(panelRegisterNewClass);
        panelRegisterNewClass.setLayout(panelRegisterNewClassLayout);
        panelRegisterNewClassLayout.setHorizontalGroup(
            panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegisterNewClassLayout.createSequentialGroup()
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelClassId, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelRegisterNewClassLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(labelSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelRegisterNewClassLayout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(labelDay, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(42, 42, 42)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(textTeacher, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxGrade, javax.swing.GroupLayout.Alignment.LEADING, 0, 247, Short.MAX_VALUE)
                    .addComponent(textClassId, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboBoxSubject, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textPeriod)
                    .addComponent(comboBoxDay, 0, 247, Short.MAX_VALUE))
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRegisterNewClassLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(labelRegisterNewClass, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128))
        );
        panelRegisterNewClassLayout.setVerticalGroup(
            panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRegisterNewClassLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textClassId)
                    .addComponent(labelClassId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubject)
                    .addComponent(comboBoxSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelGrade)
                    .addComponent(comboBoxGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTeacher)
                    .addComponent(textTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDay)
                    .addComponent(comboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelRegisterNewClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPeriod)
                    .addComponent(textPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addComponent(labelRegisterNewClass, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );

        panelBackGround.add(panelRegisterNewClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 490, 570));

        panelSearchClass.setBackground(new java.awt.Color(153, 153, 255));
        panelSearchClass.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Class", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelSubjectOfSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelSubjectOfSearch.setText("Subject");

        labelGradeOfSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelGradeOfSearch.setText("Grade");

        labelTeacherOfSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTeacherOfSearch.setText("Teacher");

        labelDayOfSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelDayOfSearch.setText("Day");

        labelPeriodOfSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelPeriodOfSearch.setText("Period");

        comboBoxSubjectOfSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxSubjectOfSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSubjectOfSearchItemStateChanged(evt);
            }
        });

        comboBoxGradeOfSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxGradeOfSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxGradeOfSearchItemStateChanged(evt);
            }
        });

        comboBoxTeacherOfSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxTeacherOfSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTeacherOfSearchItemStateChanged(evt);
            }
        });

        comboBoxDayOfSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxDayOfSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxDayOfSearchItemStateChanged(evt);
            }
        });

        labelClassIdOfSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelClassIdOfSearch.setText("Class ID");

        labeModifyClassDetail.setBackground(new java.awt.Color(255, 0, 0));
        labeModifyClassDetail.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        labeModifyClassDetail.setForeground(new java.awt.Color(255, 255, 255));
        labeModifyClassDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labeModifyClassDetail.setText("Modify Class Detail");
        labeModifyClassDetail.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labeModifyClassDetail.setOpaque(true);
        labeModifyClassDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labeModifyClassDetailMouseClicked(evt);
            }
        });

        labelRemoveClassDetail.setBackground(new java.awt.Color(255, 0, 0));
        labelRemoveClassDetail.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        labelRemoveClassDetail.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveClassDetail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveClassDetail.setText("Remove Class Detail");
        labelRemoveClassDetail.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelRemoveClassDetail.setOpaque(true);
        labelRemoveClassDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveClassDetailMouseClicked(evt);
            }
        });

        textClassIdOfSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textClassIdOfSearch.setEnabled(false);

        comboBoxPeriodOfSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxPeriodOfSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxPeriodOfSearchItemStateChanged(evt);
            }
        });

        textTeacherOfChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textTeacherOfChange.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textTeacherOfChangeKeyReleased(evt);
            }
        });

        textPeriodOfChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        comboBoxSubjectOfChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        comboBoxGradeOfChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        comboBoxDayOfChange.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        labelDiscribe.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelDiscribe.setText("If you modify class ,fill all field in below.");

        javax.swing.GroupLayout panelSearchClassLayout = new javax.swing.GroupLayout(panelSearchClass);
        panelSearchClass.setLayout(panelSearchClassLayout);
        panelSearchClassLayout.setHorizontalGroup(
            panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSearchClassLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelClassIdOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPeriodOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDayOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTeacherOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelGradeOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSubjectOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelRemoveClassDetail, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                    .addComponent(comboBoxPeriodOfSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxDayOfSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxTeacherOfSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxGradeOfSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxSubjectOfSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textClassIdOfSearch, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelDiscribe, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(textTeacherOfChange, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(textPeriodOfChange)
                    .addComponent(comboBoxSubjectOfChange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxGradeOfChange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxDayOfChange, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labeModifyClassDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50))
        );
        panelSearchClassLayout.setVerticalGroup(
            panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchClassLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelDiscribe)
                .addGap(20, 20, 20)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSubjectOfSearch)
                    .addComponent(comboBoxSubjectOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxSubjectOfChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelGradeOfSearch)
                    .addComponent(comboBoxGradeOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxGradeOfChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTeacherOfSearch)
                    .addComponent(comboBoxTeacherOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textTeacherOfChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDayOfSearch)
                    .addComponent(comboBoxDayOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxDayOfChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPeriodOfSearch)
                    .addComponent(comboBoxPeriodOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textPeriodOfChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelClassIdOfSearch)
                    .addComponent(textClassIdOfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addGroup(panelSearchClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRemoveClassDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labeModifyClassDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );

        panelBackGround.add(panelSearchClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, 740, 570));

        labelBackToFirstPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gif/home-animated-blue-1.gif"))); // NOI18N
        labelBackToFirstPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackToFirstPageMouseClicked(evt);
            }
        });
        panelBackGround.add(labelBackToFirstPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 90));

        labelBackGround.setBackground(new java.awt.Color(0, 0, 153));
        labelBackGround.setOpaque(true);
        panelBackGround.add(labelBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textTeacherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTeacherKeyReleased
        searchTeacherByName();
    }//GEN-LAST:event_textTeacherKeyReleased

    private void labelRegisterNewClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRegisterNewClassMouseClicked
        RegisterNewClass();
    }//GEN-LAST:event_labelRegisterNewClassMouseClicked

    private void comboBoxSubjectOfSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSubjectOfSearchItemStateChanged
        ArrayList<Integer> allClassGrade;
        String subject=(String) comboBoxSubjectOfSearch.getSelectedItem();
        comboBoxGradeOfSearch.removeAllItems();
        try {
            allClassGrade=ClassDetailController.searchClassDetailBySubject(subject);
            for (Integer grade : allClassGrade) {
                comboBoxGradeOfSearch.addItem(Integer.toString(grade));
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxSubjectOfSearchItemStateChanged

    private void comboBoxGradeOfSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxGradeOfSearchItemStateChanged
        ArrayList<String> allTeachers;
        String subject=(String) comboBoxSubjectOfSearch.getSelectedItem();
        String grade= (String) comboBoxGradeOfSearch.getSelectedItem();
        comboBoxTeacherOfSearch.removeAllItems();
        try {
            allTeachers=ClassDetailController.searchClassDetailBySubjectGrade(subject, grade);
            for (String teacher : allTeachers) {
                comboBoxTeacherOfSearch.addItem(teacher);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxGradeOfSearchItemStateChanged

    private void comboBoxTeacherOfSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTeacherOfSearchItemStateChanged
        String subject=(String) comboBoxSubjectOfSearch.getSelectedItem();
        String grade=(String) comboBoxGradeOfSearch.getSelectedItem();
        String teacher=(String) comboBoxTeacherOfSearch.getSelectedItem();
        comboBoxDayOfSearch.removeAllItems();
        ArrayList<String> dayList;
        try {
            dayList=ClassDetailController.searchClassDetailBySubjectGradeTeacher(subject, grade, teacher);
            for (String day : dayList) {
                comboBoxDayOfSearch.addItem(day);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxTeacherOfSearchItemStateChanged

    private void textTeacherOfChangeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTeacherOfChangeKeyReleased
        searchTeacherByNameForChange();
    }//GEN-LAST:event_textTeacherOfChangeKeyReleased

    private void comboBoxPeriodOfSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxPeriodOfSearchItemStateChanged
        String subject=(String) comboBoxSubjectOfSearch.getSelectedItem();
        String grade= (String) comboBoxGradeOfSearch.getSelectedItem();
        String teacher=(String) comboBoxTeacherOfSearch.getSelectedItem();
        String day=(String) comboBoxDayOfSearch.getSelectedItem();
        String period=(String) comboBoxPeriodOfSearch.getSelectedItem();
        try {
            String classId=ClassDetailController.searchClassDetailBySubjectGradeTeacherDayPeriod(subject, grade, teacher, day, period);
            textClassIdOfSearch.setText(classId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxPeriodOfSearchItemStateChanged

    private void labelRemoveClassDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveClassDetailMouseClicked
        removeClass();        
    }//GEN-LAST:event_labelRemoveClassDetailMouseClicked

    private void labeModifyClassDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labeModifyClassDetailMouseClicked
        modifyClassDetail();
    }//GEN-LAST:event_labeModifyClassDetailMouseClicked

    private void comboBoxDayOfSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxDayOfSearchItemStateChanged
        String subject=(String) comboBoxSubjectOfSearch.getSelectedItem();
        String grade=(String) comboBoxGradeOfSearch.getSelectedItem();
        String teacher=(String) comboBoxTeacherOfSearch.getSelectedItem();
        String day=(String) comboBoxDayOfSearch.getSelectedItem();       
        comboBoxPeriodOfSearch.removeAllItems();
        ArrayList<String> periodList;
        try {
            periodList=ClassDetailController.searchClassDetailBySubjectGradeTeacherDay(subject, grade, teacher, day);
            for (String period : periodList) {               
                comboBoxPeriodOfSearch.addItem(period);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxDayOfSearchItemStateChanged

    private void labelBackToFirstPageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackToFirstPageMouseClicked
        new FirstPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_labelBackToFirstPageMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxDay;
    private javax.swing.JComboBox comboBoxDayOfChange;
    private javax.swing.JComboBox comboBoxDayOfSearch;
    private javax.swing.JComboBox comboBoxGrade;
    private javax.swing.JComboBox comboBoxGradeOfChange;
    private javax.swing.JComboBox comboBoxGradeOfSearch;
    private javax.swing.JComboBox comboBoxPeriodOfSearch;
    private javax.swing.JComboBox comboBoxSubject;
    private javax.swing.JComboBox comboBoxSubjectOfChange;
    private javax.swing.JComboBox comboBoxSubjectOfSearch;
    private javax.swing.JComboBox comboBoxTeacherOfSearch;
    private javax.swing.JLabel labeModifyClassDetail;
    private javax.swing.JLabel labelBackGround;
    private javax.swing.JLabel labelBackToFirstPage;
    private javax.swing.JLabel labelClassId;
    private javax.swing.JLabel labelClassIdOfSearch;
    private javax.swing.JLabel labelDay;
    private javax.swing.JLabel labelDayOfSearch;
    private javax.swing.JLabel labelDiscribe;
    private javax.swing.JLabel labelGrade;
    private javax.swing.JLabel labelGradeOfSearch;
    private javax.swing.JLabel labelManageClass;
    private javax.swing.JLabel labelPeriod;
    private javax.swing.JLabel labelPeriodOfSearch;
    private javax.swing.JLabel labelRegisterNewClass;
    private javax.swing.JLabel labelRemoveClassDetail;
    private javax.swing.JLabel labelSubject;
    private javax.swing.JLabel labelSubjectOfSearch;
    private javax.swing.JLabel labelTeacher;
    private javax.swing.JLabel labelTeacherOfSearch;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelRegisterNewClass;
    private javax.swing.JPanel panelSearchClass;
    private javax.swing.JTextField textClassId;
    private javax.swing.JTextField textClassIdOfSearch;
    private javax.swing.JTextField textPeriod;
    private javax.swing.JTextField textPeriodOfChange;
    private javax.swing.JTextField textTeacher;
    private javax.swing.JTextField textTeacherOfChange;
    // End of variables declaration//GEN-END:variables

    private void loadAllSubject() {
        ArrayList<Subject> allSubjects;
        try {
            allSubjects=SubjectController.viewSubject();
            for (Subject subject : allSubjects) {
                comboBoxSubject.addItem(subject.getSubjctName());
                comboBoxSubjectOfChange.addItem(subject.getSubjctName());
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllGrade() {
        ArrayList<Grade> allGrades;
        try {
            allGrades=GradeController.viewGrade();
            for (Grade grade : allGrades) {
                comboBoxGrade.addItem(grade.getGrade());
                comboBoxGradeOfChange.addItem(grade.getGrade());
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchTeacherByName() {
        String name=textTeacher.getText();
        int index=name.length();
        try {
            Teacher teacher=TeacherController.searchTeacherByName(name);
            if (teacher!=null) {
                textTeacher.setText(teacher.getName());
                textTeacher.select(index, 30);
            } else {
                JOptionPane.showMessageDialog(this, "Teacher's name is wrong...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllDay() {
        String day[]=(new DateFormatSymbols()).getWeekdays();
        for (int i = 1; i < 8; i++) {
             comboBoxDay.addItem(day[i]);
             comboBoxDayOfChange.addItem(day[i]);
        }               
    }

    private void RegisterNewClass() {
        if (checkAllFieldForRegisterNewClass()) {
            String subjectName=(String) comboBoxSubject.getSelectedItem();
            String teacherName=textTeacher.getText();
            int gradeNumber=(int) comboBoxGrade.getSelectedItem();
            String ClassId=textClassId.getText();
            String day=(String) comboBoxDay.getSelectedItem();
            String period=textPeriod.getText();

            Subject subject = new Subject();
            try {
                subject = SubjectController.searchSubjectId(subjectName);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }

            Teacher teacher = new Teacher();
            try {
                teacher = TeacherController.searchTeacherId(teacherName);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }

            Grade grade = new Grade();
            try {
                grade = GradeController.searchGrade(gradeNumber);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }

            Classes classes=new Classes(subject.getSUID(), teacher.getTID(), grade.getGID(), ClassId, day, period);
            try {
                boolean isAdded=ClassController.addClass(classes);
                if (isAdded) {
                    JOptionPane.showMessageDialog(this, "New class is added success...");
                    generateClassId();
                } else {
                    JOptionPane.showMessageDialog(this, "Added Fail...");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Class ID is duplicated...");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Check whether you have filled all text field.");
        }
        
    }

    private void loadAllClassSubject() {
        ArrayList<String> allClassSubject;
        try {
            allClassSubject=ClassDetailController.searchSubject();
            for (String subject : allClassSubject) {
                comboBoxSubjectOfSearch.addItem(subject);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchTeacherByNameForChange() {
        String name=textTeacherOfChange.getText();
        int index=name.length();
        try {
            Teacher teacher=TeacherController.searchTeacherByName(name);
            if (teacher!=null) {
                textTeacherOfChange.setText(teacher.getName());
                textTeacherOfChange.select(index, 30);
            } else {
                JOptionPane.showMessageDialog(this, "Teacher's name is wrong...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removeClass() {
        String classId=textClassIdOfSearch.getText();
        try {
            boolean isRemove=ClassController.deleteClass(classId);
            if (isRemove) {
                JOptionPane.showMessageDialog(this, "Class Detail is deleted...");
            } else {
                JOptionPane.showMessageDialog(this, "Delete Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void modifyClassDetail() {
        if (checkAllFieldForModifyClassDetail()) {
            String subjectName=(String) comboBoxSubjectOfChange.getSelectedItem();
            String teacherName=textTeacherOfChange.getText();
            int gradeNumber=(int) comboBoxGradeOfChange.getSelectedItem();
            String ClassId=textClassIdOfSearch.getText();
            String day=(String) comboBoxDayOfChange.getSelectedItem();
            String period=textPeriodOfChange.getText();

            Subject subject=new Subject();
            try {
                subject=SubjectController.searchSubjectId(subjectName);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }

            Teacher teacher=new Teacher();
            try {
                teacher=TeacherController.searchTeacherId(teacherName);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }
        
            Grade grade=new Grade();
            try {
                grade=GradeController.searchGrade(gradeNumber);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }

            Classes classes=new Classes(subject.getSUID(), teacher.getTID(), grade.getGID(), ClassId, day, period);
            try {
                boolean isModify=ClassController.updateClass(classes);
                if (isModify) {
                    JOptionPane.showMessageDialog(this, "Class detail is updated...");
                } else {
                    JOptionPane.showMessageDialog(this, "Update Fail...");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Check whether you have filed all field.");
        }
        
    }

    private boolean checkAllFieldForRegisterNewClass() {
        boolean fillTeacher=textTeacher.getText().isEmpty();
        boolean fillPeriod=textPeriod.getText().isEmpty();
        boolean fillClassId=textClassId.getText().isEmpty();
        if (fillTeacher || fillPeriod || fillClassId) {
            return false;
        } else {
            return true;
        }
    }

    private boolean checkAllFieldForModifyClassDetail() {
        boolean fillTeacher=textTeacherOfChange.getText().isEmpty();
        boolean fillPeriod=textPeriodOfChange.getText().isEmpty();
        boolean fillClassId=textClassIdOfSearch.getText().isEmpty();
        if (fillTeacher || fillPeriod || fillClassId) {
            return false;
        } else {
            return true;
        }
    }

    private void generateClassId() {
        String classId=null;
        try {
            classId=GenerateIdController.lastTableId("CID", "Class");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageClass.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (classId!=null) {
            int idLength=classId.length();
            String idNumber=classId.substring(1, idLength);
            int idNumberInteger=Integer.parseInt(idNumber);
            int nextNumber=idNumberInteger+1;
            if (nextNumber<10) {
                textClassId.setText("c00"+nextNumber);
            }
            if (nextNumber>=10 & nextNumber<100) {
                textClassId.setText("c0"+nextNumber);
            }
            if (nextNumber>=100) {
                textClassId.setText("c"+nextNumber);
            }
        } else {
            textClassId.setText("c001");
        }
    }

    
}
