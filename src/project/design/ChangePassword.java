/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.design;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import project.controller.GenerateIdController;
import project.controller.LoginController;
import project.model.Login;

/**
 *
 * @author 
 */
public class ChangePassword extends javax.swing.JFrame {

    /**
     * Creates new form ChangePassword
     */
    public ChangePassword() {
        initComponents();
        setLocationRelativeTo(null);
        generatePasswordId();
        textUserName.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        labelExit = new javax.swing.JLabel();
        labelTitle = new javax.swing.JLabel();
        labelPasswordId = new javax.swing.JLabel();
        textPasswordId = new javax.swing.JTextField();
        labelUserName = new javax.swing.JLabel();
        labelPassword = new javax.swing.JLabel();
        textUserName = new javax.swing.JTextField();
        labelOK = new javax.swing.JLabel();
        passwordFieldPassword = new javax.swing.JPasswordField();
        labelCancelPassword = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setBackground(new java.awt.Color(204, 204, 255));
        panelBackGround.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelExit.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        labelExit.setForeground(new java.awt.Color(204, 0, 0));
        labelExit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExit.setText("X");
        labelExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelExitMouseClicked(evt);
            }
        });

        labelTitle.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(204, 0, 0));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Change Password and User Name");

        labelPasswordId.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPasswordId.setText("Password ID");

        textPasswordId.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        textPasswordId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPasswordIdActionPerformed(evt);
            }
        });

        labelUserName.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelUserName.setText("User Name");

        labelPassword.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        labelPassword.setText("Password");

        textUserName.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        textUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textUserNameActionPerformed(evt);
            }
        });

        labelOK.setBackground(new java.awt.Color(255, 0, 0));
        labelOK.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelOK.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelOK.setText("OK");
        labelOK.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 204), new java.awt.Color(102, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelOK.setOpaque(true);
        labelOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelOKMouseClicked(evt);
            }
        });

        passwordFieldPassword.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        passwordFieldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldPasswordActionPerformed(evt);
            }
        });

        labelCancelPassword.setBackground(new java.awt.Color(255, 0, 0));
        labelCancelPassword.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        labelCancelPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCancelPassword.setText("Cancel Password & User Name");
        labelCancelPassword.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 204), new java.awt.Color(102, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelCancelPassword.setOpaque(true);
        labelCancelPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCancelPasswordMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelBackGroundLayout = new javax.swing.GroupLayout(panelBackGround);
        panelBackGround.setLayout(panelBackGroundLayout);
        panelBackGroundLayout.setHorizontalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBackGroundLayout.createSequentialGroup()
                .addGap(0, 432, Short.MAX_VALUE)
                .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(labelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBackGroundLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addComponent(labelUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addComponent(labelPasswordId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textPasswordId))
                            .addGroup(panelBackGroundLayout.createSequentialGroup()
                                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordFieldPassword)
                                    .addComponent(labelCancelPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBackGroundLayout.setVerticalGroup(
            panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBackGroundLayout.createSequentialGroup()
                .addComponent(labelExit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTitle)
                .addGap(48, 48, 48)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPasswordId)
                    .addComponent(textPasswordId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUserName)
                    .addComponent(textUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPassword)
                    .addComponent(passwordFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(panelBackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelOK)
                    .addComponent(labelCancelPassword))
                .addGap(62, 62, 62))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void labelExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelExitMouseClicked
        dispose();
    }//GEN-LAST:event_labelExitMouseClicked

    private void labelOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelOKMouseClicked
        registerNewPassword();
    }//GEN-LAST:event_labelOKMouseClicked

    private void textPasswordIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPasswordIdActionPerformed
        textUserName.requestFocus();
    }//GEN-LAST:event_textPasswordIdActionPerformed

    private void textUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textUserNameActionPerformed
        passwordFieldPassword.requestFocus();
    }//GEN-LAST:event_textUserNameActionPerformed

    private void labelCancelPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCancelPasswordMouseClicked
        removePasswordAndUserName();
    }//GEN-LAST:event_labelCancelPasswordMouseClicked

    private void passwordFieldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldPasswordActionPerformed
        searchPasswordId();
    }//GEN-LAST:event_passwordFieldPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChangePassword.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChangePassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelCancelPassword;
    private javax.swing.JLabel labelExit;
    private javax.swing.JLabel labelOK;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelPasswordId;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel labelUserName;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPasswordField passwordFieldPassword;
    private javax.swing.JTextField textPasswordId;
    private javax.swing.JTextField textUserName;
    // End of variables declaration//GEN-END:variables

    private void registerNewPassword() {
        Login login=new Login(textPasswordId.getText(), textUserName.getText(), passwordFieldPassword.getText());
        try {
            boolean isRegister=LoginController.addPasswordAndUserName(login);
            if (isRegister) {
                JOptionPane.showMessageDialog(this, "Added success!");
            } else {
                JOptionPane.showMessageDialog(this, "Added Fail.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void generatePasswordId() {
        String passwordId=null;
        try {
            passwordId=GenerateIdController.lastTableId("PasswordId", "Login");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (passwordId!=null) {
            int idLength=passwordId.length();
            String idNumber=passwordId.substring(2, idLength);
            int idNumberInteger=Integer.parseInt(idNumber);
            int nextNumber=idNumberInteger+1;
            if (nextNumber<10) {
                textPasswordId.setText("pw00"+nextNumber);
            }
            if (nextNumber>=10 & nextNumber<100) {
                textPasswordId.setText("pw0"+nextNumber);
            }
            if (nextNumber>=100) {
                textPasswordId.setText("pw"+nextNumber);
            }
        } else {
            textPasswordId.setText("pw001");
        }
    }

    private void searchPasswordId() {
        String userName=textUserName.getText();
        String password=passwordFieldPassword.getText();
        try {
            String passwordId=LoginController.searchPasswordId(userName, password);
            if (passwordId!=null) {
                textPasswordId.setText(passwordId);
            } else {
                JOptionPane.showMessageDialog(this, "User name and password are wrong.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void removePasswordAndUserName() {
        String passwordId=textPasswordId.getText();
        try {
            boolean isDeleted=LoginController.deletePasswordAndUserName(passwordId);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "User name and password are deleted.");
            } else {
                JOptionPane.showMessageDialog(this, "Delete Fail.");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ChangePassword.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
