/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.design;

import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import project.controller.ClassDetailController;
import project.controller.ExamController;
import project.controller.GenerateIdController;
import project.controller.ResultController;
import project.controller.SessionController;
import project.controller.StudentController;
import project.model.ClassDetail;
import project.model.Exam;
import project.model.Result;
import project.model.Session;
import project.model.Student;

/**
 *
 * @author 
 */
public class ManageExam extends javax.swing.JFrame {

    /**
     * Creates new form ManageExam
     */
    public ManageExam() {
        initComponents();
        loadExamDate();
        generateExamId();
        loadAllClassSubject();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackGround = new javax.swing.JPanel();
        labelTitle = new javax.swing.JLabel();
        panelAddNewExam = new javax.swing.JPanel();
        labelExamName = new javax.swing.JLabel();
        labelExamId = new javax.swing.JLabel();
        labelExamDate = new javax.swing.JLabel();
        textExamName = new javax.swing.JTextField();
        textExamId = new javax.swing.JTextField();
        textExamDate = new javax.swing.JTextField();
        textModifyExamName = new javax.swing.JTextField();
        labelDiscribeModifyExamName = new javax.swing.JLabel();
        panelSelectStudent = new javax.swing.JPanel();
        labelStudentId = new javax.swing.JLabel();
        textStudentId = new javax.swing.JTextField();
        labelStudentName = new javax.swing.JLabel();
        textStudentName = new javax.swing.JTextField();
        panelSelectClass = new javax.swing.JPanel();
        labelSubject = new javax.swing.JLabel();
        labelGrade = new javax.swing.JLabel();
        labelTeacher = new javax.swing.JLabel();
        labelDay = new javax.swing.JLabel();
        labelPeriod = new javax.swing.JLabel();
        labelClassId = new javax.swing.JLabel();
        comboBoxSubject = new javax.swing.JComboBox();
        comboBoxGrade = new javax.swing.JComboBox();
        comboBoxTeacher = new javax.swing.JComboBox();
        comboBoxDay = new javax.swing.JComboBox();
        comboBoxPeriod = new javax.swing.JComboBox();
        textClassId = new javax.swing.JTextField();
        panelResult = new javax.swing.JPanel();
        labelSessionId = new javax.swing.JLabel();
        labelMark = new javax.swing.JLabel();
        labelState = new javax.swing.JLabel();
        labelResultId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResult = new javax.swing.JTable();
        labelConfirm = new javax.swing.JLabel();
        textSessionId = new javax.swing.JTextField();
        textMarks = new javax.swing.JTextField();
        textState = new javax.swing.JTextField();
        textResultId = new javax.swing.JTextField();
        labelRemoveExam = new javax.swing.JLabel();
        labelModifyExam = new javax.swing.JLabel();
        labelAddNewResult = new javax.swing.JLabel();
        labelRemoveResult = new javax.swing.JLabel();
        labelClear = new javax.swing.JLabel();
        labelDiscribe = new javax.swing.JLabel();
        labelBackToFirstPage = new javax.swing.JLabel();
        labelBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        panelBackGround.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelTitle.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        labelTitle.setForeground(new java.awt.Color(255, 0, 0));
        labelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTitle.setText("Manage Exam");
        panelBackGround.add(labelTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 390, 60));

        panelAddNewExam.setBackground(new java.awt.Color(153, 153, 255));
        panelAddNewExam.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exam Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelExamName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelExamName.setText("Exam Name");

        labelExamId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelExamId.setText("Exam ID");

        labelExamDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelExamDate.setText("Exam Date");

        textExamName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textExamName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textExamNameActionPerformed(evt);
            }
        });
        textExamName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textExamNameKeyReleased(evt);
            }
        });

        textExamId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textExamId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textExamIdActionPerformed(evt);
            }
        });

        textExamDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        textModifyExamName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textModifyExamName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textModifyExamNameActionPerformed(evt);
            }
        });

        labelDiscribeModifyExamName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelDiscribeModifyExamName.setForeground(new java.awt.Color(0, 0, 153));
        labelDiscribeModifyExamName.setText("If you modify Exam name, fill below text field.");

        javax.swing.GroupLayout panelAddNewExamLayout = new javax.swing.GroupLayout(panelAddNewExam);
        panelAddNewExam.setLayout(panelAddNewExamLayout);
        panelAddNewExamLayout.setHorizontalGroup(
            panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddNewExamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelExamName, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(labelExamId, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(labelExamDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelDiscribeModifyExamName, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addGroup(panelAddNewExamLayout.createSequentialGroup()
                        .addGroup(panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textExamName, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textExamDate, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textExamId, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textModifyExamName, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelAddNewExamLayout.setVerticalGroup(
            panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddNewExamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textExamName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelExamName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelDiscribeModifyExamName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textModifyExamName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textExamId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelExamId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelAddNewExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textExamDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelExamDate))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        panelBackGround.add(panelAddNewExam, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 420, 250));

        panelSelectStudent.setBackground(new java.awt.Color(153, 153, 255));
        panelSelectStudent.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Student", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelStudentId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelStudentId.setText("Student ID");

        textStudentId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStudentIdActionPerformed(evt);
            }
        });

        labelStudentName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelStudentName.setText("Student Name");

        textStudentName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStudentNameActionPerformed(evt);
            }
        });
        textStudentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textStudentNameKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout panelSelectStudentLayout = new javax.swing.GroupLayout(panelSelectStudent);
        panelSelectStudent.setLayout(panelSelectStudentLayout);
        panelSelectStudentLayout.setHorizontalGroup(
            panelSelectStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectStudentLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panelSelectStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                    .addComponent(labelStudentId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelSelectStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(356, Short.MAX_VALUE))
        );
        panelSelectStudentLayout.setVerticalGroup(
            panelSelectStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSelectStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStudentId)
                    .addComponent(textStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSelectStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStudentName)
                    .addComponent(textStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        panelBackGround.add(panelSelectStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 850, 150));

        panelSelectClass.setBackground(new java.awt.Color(153, 153, 255));
        panelSelectClass.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Class", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelSubject.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelSubject.setText("Subject");

        labelGrade.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelGrade.setText("Grade");

        labelTeacher.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTeacher.setText("Teacher");

        labelDay.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelDay.setText("Day");

        labelPeriod.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelPeriod.setText("Period");

        labelClassId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelClassId.setText("Class ID");

        comboBoxSubject.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxSubject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxSubjectItemStateChanged(evt);
            }
        });

        comboBoxGrade.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxGrade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxGradeItemStateChanged(evt);
            }
        });

        comboBoxTeacher.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxTeacher.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxTeacherItemStateChanged(evt);
            }
        });

        comboBoxDay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxDay.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxDayItemStateChanged(evt);
            }
        });
        comboBoxDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDayActionPerformed(evt);
            }
        });

        comboBoxPeriod.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        comboBoxPeriod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxPeriodItemStateChanged(evt);
            }
        });

        textClassId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textClassId.setEnabled(false);

        javax.swing.GroupLayout panelSelectClassLayout = new javax.swing.GroupLayout(panelSelectClass);
        panelSelectClass.setLayout(panelSelectClassLayout);
        panelSelectClassLayout.setHorizontalGroup(
            panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectClassLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(labelGrade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(labelDay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelPeriod, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelSubject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelClassId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textClassId, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxSubject, 0, 218, Short.MAX_VALUE)
                    .addComponent(comboBoxPeriod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxDay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxTeacher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxGrade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        panelSelectClassLayout.setVerticalGroup(
            panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSelectClassLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelSubject, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboBoxSubject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelGrade, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboBoxGrade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboBoxTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTeacher))
                .addGap(18, 18, 18)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelDay, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboBoxDay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboBoxPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPeriod))
                .addGap(18, 18, 18)
                .addGroup(panelSelectClassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelClassId)
                    .addComponent(textClassId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        panelBackGround.add(panelSelectClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 420, 360));

        panelResult.setBackground(new java.awt.Color(153, 153, 255));
        panelResult.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 24), new java.awt.Color(0, 0, 102))); // NOI18N

        labelSessionId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelSessionId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSessionId.setText("Session ID");

        labelMark.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelMark.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMark.setText("Marks");

        labelState.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelState.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelState.setText("State");

        labelResultId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelResultId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelResultId.setText("Result Id");

        tableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Session ID", "Student ID", "Class ID", "Result ID", "Marks", "State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableResult);

        labelConfirm.setBackground(new java.awt.Color(255, 0, 0));
        labelConfirm.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelConfirm.setForeground(new java.awt.Color(255, 255, 255));
        labelConfirm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelConfirm.setText("Confirm");
        labelConfirm.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelConfirm.setOpaque(true);
        labelConfirm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelConfirmMouseClicked(evt);
            }
        });

        textSessionId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textSessionId.setEnabled(false);

        textMarks.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textMarks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMarksActionPerformed(evt);
            }
        });

        textState.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textStateActionPerformed(evt);
            }
        });

        textResultId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        textResultId.setEnabled(false);
        textResultId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textResultIdActionPerformed(evt);
            }
        });

        labelRemoveExam.setBackground(new java.awt.Color(255, 0, 0));
        labelRemoveExam.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelRemoveExam.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveExam.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveExam.setText("Remove Exam");
        labelRemoveExam.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelRemoveExam.setOpaque(true);
        labelRemoveExam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveExamMouseClicked(evt);
            }
        });

        labelModifyExam.setBackground(new java.awt.Color(255, 0, 0));
        labelModifyExam.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelModifyExam.setForeground(new java.awt.Color(255, 255, 255));
        labelModifyExam.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelModifyExam.setText("Modify Exam");
        labelModifyExam.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelModifyExam.setOpaque(true);
        labelModifyExam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelModifyExamMouseClicked(evt);
            }
        });

        labelAddNewResult.setBackground(new java.awt.Color(255, 0, 0));
        labelAddNewResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelAddNewResult.setForeground(new java.awt.Color(255, 255, 255));
        labelAddNewResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAddNewResult.setText("Add New Result");
        labelAddNewResult.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelAddNewResult.setOpaque(true);
        labelAddNewResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelAddNewResultMouseClicked(evt);
            }
        });

        labelRemoveResult.setBackground(new java.awt.Color(255, 0, 0));
        labelRemoveResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelRemoveResult.setForeground(new java.awt.Color(255, 255, 255));
        labelRemoveResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelRemoveResult.setText("Remove Result");
        labelRemoveResult.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelRemoveResult.setOpaque(true);
        labelRemoveResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelRemoveResultMouseClicked(evt);
            }
        });

        labelClear.setBackground(new java.awt.Color(255, 0, 0));
        labelClear.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelClear.setForeground(new java.awt.Color(255, 255, 255));
        labelClear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelClear.setText("Clear");
        labelClear.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 51, 51), new java.awt.Color(153, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        labelClear.setOpaque(true);
        labelClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelClearMouseClicked(evt);
            }
        });

        labelDiscribe.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelDiscribe.setText("Before click below button select row");

        javax.swing.GroupLayout panelResultLayout = new javax.swing.GroupLayout(panelResult);
        panelResult.setLayout(panelResultLayout);
        panelResultLayout.setHorizontalGroup(
            panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(panelResultLayout.createSequentialGroup()
                        .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panelResultLayout.createSequentialGroup()
                                .addComponent(textSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textMarks, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelResultLayout.createSequentialGroup()
                                .addComponent(labelSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(labelMark, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(41, 41, 41)
                        .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelState, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textState, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelResultId, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textResultId, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelResultLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelRemoveExam, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelModifyExam, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelClear, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26))
                    .addGroup(panelResultLayout.createSequentialGroup()
                        .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelResultLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAddNewResult, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelRemoveResult, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelResultLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelDiscribe)))
                        .addContainerGap(13, Short.MAX_VALUE))))
        );
        panelResultLayout.setVerticalGroup(
            panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSessionId)
                    .addComponent(labelMark)
                    .addComponent(labelState)
                    .addComponent(labelResultId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textSessionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textResultId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(panelResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelResultLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))
                    .addGroup(panelResultLayout.createSequentialGroup()
                        .addComponent(labelConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelRemoveExam, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelModifyExam, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelClear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelDiscribe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(labelAddNewResult, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelRemoveResult, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );

        panelBackGround.add(panelResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 260, 850, 460));

        labelBackToFirstPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gif/home-animated-blue-1.gif"))); // NOI18N
        labelBackToFirstPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelBackToFirstPageMouseClicked(evt);
            }
        });
        panelBackGround.add(labelBackToFirstPage, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 90));

        labelBackGround.setBackground(new java.awt.Color(0, 0, 153));
        labelBackGround.setOpaque(true);
        panelBackGround.add(labelBackGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBackGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textExamNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textExamNameActionPerformed
        textExamId.requestFocus();
    }//GEN-LAST:event_textExamNameActionPerformed

    private void textStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStudentIdActionPerformed
        searchStudentByStudentId();
        getSessionId();
        if (tableResult.getRowCount()==0) {
            generateResultId();
        } else {
            generateNextResultId();
        }
    }//GEN-LAST:event_textStudentIdActionPerformed

    private void textStudentNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textStudentNameKeyReleased
        searchStudentByName();
    }//GEN-LAST:event_textStudentNameKeyReleased

    private void comboBoxSubjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxSubjectItemStateChanged
        String subject=(String) comboBoxSubject.getSelectedItem();
        comboBoxGrade.removeAllItems();
        ArrayList<Integer> grades;
        try {
            grades=ClassDetailController.searchClassDetailBySubject(subject);
            for (int grade : grades) {
                comboBoxGrade.addItem(Integer.toString(grade));
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxSubjectItemStateChanged

    private void comboBoxGradeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxGradeItemStateChanged
        String subject=(String) comboBoxSubject.getSelectedItem();
        String grade=(String) comboBoxGrade.getSelectedItem();
        comboBoxTeacher.removeAllItems();
        ArrayList<String> allTeachers;
        try {
            allTeachers=ClassDetailController.searchClassDetailBySubjectGrade(subject, grade);
            for (String teacher : allTeachers) {
                comboBoxTeacher.addItem(teacher);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxGradeItemStateChanged

    private void comboBoxTeacherItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxTeacherItemStateChanged
        String subject=(String) comboBoxSubject.getSelectedItem();
        String grade=(String) comboBoxGrade.getSelectedItem();
        String teacher=(String) comboBoxTeacher.getSelectedItem();
        comboBoxDay.removeAllItems();
        ArrayList<String> dayList;
        try {
            dayList=ClassDetailController.searchClassDetailBySubjectGradeTeacher(subject, grade, teacher);
            for (String day : dayList) {
                comboBoxDay.addItem(day);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxTeacherItemStateChanged

    private void comboBoxPeriodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxPeriodItemStateChanged
        String subject=(String) comboBoxSubject.getSelectedItem();
        String grade=(String) comboBoxGrade.getSelectedItem();
        String teacher=(String) comboBoxTeacher.getSelectedItem();
        String day=(String) comboBoxDay.getSelectedItem();
        String period=(String) comboBoxPeriod.getSelectedItem();
        try {
            String classId=ClassDetailController.searchClassDetailBySubjectGradeTeacherDayPeriod(subject, grade, teacher, day, period);
            textClassId.setText(classId); 
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxPeriodItemStateChanged

    private void textMarksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMarksActionPerformed
        textState.requestFocus();
    }//GEN-LAST:event_textMarksActionPerformed

    private void textStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStateActionPerformed
        resultAddToTable();
        textStudentId.requestFocus();
    }//GEN-LAST:event_textStateActionPerformed

    private void labelConfirmMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelConfirmMouseClicked
        addExamAndResult();
    }//GEN-LAST:event_labelConfirmMouseClicked

    private void labelRemoveExamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveExamMouseClicked
        removeExam();
    }//GEN-LAST:event_labelRemoveExamMouseClicked

    private void textExamNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textExamNameKeyReleased
        searchExam();
    }//GEN-LAST:event_textExamNameKeyReleased

    private void labelModifyExamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelModifyExamMouseClicked
        modifyExam();
    }//GEN-LAST:event_labelModifyExamMouseClicked

    private void labelAddNewResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelAddNewResultMouseClicked
        try{
            addNewResult();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelAddNewResultMouseClicked

    private void labelRemoveResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelRemoveResultMouseClicked
        try{
            removeResult();
        } catch(ArrayIndexOutOfBoundsException ex){
            JOptionPane.showMessageDialog(this, "Select row.");
        }
    }//GEN-LAST:event_labelRemoveResultMouseClicked

    private void labelClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseClicked
        clearTextFieldAndTable();
    }//GEN-LAST:event_labelClearMouseClicked

    private void textModifyExamNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textModifyExamNameActionPerformed
        textExamDate.requestFocus();
    }//GEN-LAST:event_textModifyExamNameActionPerformed

    private void textExamIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textExamIdActionPerformed
        textExamDate.requestFocus();
    }//GEN-LAST:event_textExamIdActionPerformed

    private void textResultIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textResultIdActionPerformed
        //
    }//GEN-LAST:event_textResultIdActionPerformed

    private void comboBoxDayItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxDayItemStateChanged
        String subject=(String) comboBoxSubject.getSelectedItem();
        String grade=(String) comboBoxGrade.getSelectedItem();
        String teacher=(String) comboBoxTeacher.getSelectedItem();
        String day=(String) comboBoxDay.getSelectedItem();
        comboBoxPeriod.removeAllItems();
        ArrayList<String> periodList;
        try {
            periodList=ClassDetailController.searchClassDetailBySubjectGradeTeacherDay(subject, grade, teacher, day);
            for (String period : periodList) {
                comboBoxPeriod.addItem(period);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboBoxDayItemStateChanged

    private void labelBackToFirstPageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBackToFirstPageMouseClicked
        new FirstPage().setVisible(true);
        dispose();
    }//GEN-LAST:event_labelBackToFirstPageMouseClicked

    private void comboBoxDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxDayActionPerformed

    private void textStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textStudentNameActionPerformed
        getSessionId();
        if (tableResult.getRowCount()==0) {
            generateResultId();
        } else {
            generateNextResultId();
        }
    }//GEN-LAST:event_textStudentNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageExam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageExam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBoxDay;
    private javax.swing.JComboBox comboBoxGrade;
    private javax.swing.JComboBox comboBoxPeriod;
    private javax.swing.JComboBox comboBoxSubject;
    private javax.swing.JComboBox comboBoxTeacher;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAddNewResult;
    private javax.swing.JLabel labelBackGround;
    private javax.swing.JLabel labelBackToFirstPage;
    private javax.swing.JLabel labelClassId;
    private javax.swing.JLabel labelClear;
    private javax.swing.JLabel labelConfirm;
    private javax.swing.JLabel labelDay;
    private javax.swing.JLabel labelDiscribe;
    private javax.swing.JLabel labelDiscribeModifyExamName;
    private javax.swing.JLabel labelExamDate;
    private javax.swing.JLabel labelExamId;
    private javax.swing.JLabel labelExamName;
    private javax.swing.JLabel labelGrade;
    private javax.swing.JLabel labelMark;
    private javax.swing.JLabel labelModifyExam;
    private javax.swing.JLabel labelPeriod;
    private javax.swing.JLabel labelRemoveExam;
    private javax.swing.JLabel labelRemoveResult;
    private javax.swing.JLabel labelResultId;
    private javax.swing.JLabel labelSessionId;
    private javax.swing.JLabel labelState;
    private javax.swing.JLabel labelStudentId;
    private javax.swing.JLabel labelStudentName;
    private javax.swing.JLabel labelSubject;
    private javax.swing.JLabel labelTeacher;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JPanel panelAddNewExam;
    private javax.swing.JPanel panelBackGround;
    private javax.swing.JPanel panelResult;
    private javax.swing.JPanel panelSelectClass;
    private javax.swing.JPanel panelSelectStudent;
    private javax.swing.JTable tableResult;
    private javax.swing.JTextField textClassId;
    private javax.swing.JTextField textExamDate;
    private javax.swing.JTextField textExamId;
    private javax.swing.JTextField textExamName;
    private javax.swing.JTextField textMarks;
    private javax.swing.JTextField textModifyExamName;
    private javax.swing.JTextField textResultId;
    private javax.swing.JTextField textSessionId;
    private javax.swing.JTextField textState;
    private javax.swing.JTextField textStudentId;
    private javax.swing.JTextField textStudentName;
    // End of variables declaration//GEN-END:variables

    private void loadExamDate() {
        SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd");
        String date=dateFormat.format(new Date());
        textExamDate.setText(date);
    }

    private void searchStudentByStudentId() {
        String studentId=textStudentId.getText();
        try {
            Student student=StudentController.searchStudent(studentId);
            if (student!=null) {
                textStudentName.setText(student.getName());
            } else {
                JOptionPane.showMessageDialog(this, "Wrong Student ID!\nEnter correct Student ID");
                textStudentName.setText("");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchStudentByName() {
        String studentName=textStudentName.getText();
        int index=studentName.length();
        try {
            Student student=StudentController.searchStudentByName(studentName);
            if (student!=null) {
                textStudentName.setText(student.getName());
                textStudentName.select(index, 30);
                textStudentId.setText(student.getSID());
            } else {
                textStudentId.setText("");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAllClassSubject() {
        ArrayList<String> allSubject;
        try {
            allSubject=ClassDetailController.searchSubject();
            for (String subject : allSubject) {
                comboBoxSubject.addItem(subject);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getSessionId() {
        String studentId=textStudentId.getText();
        String classId=textClassId.getText();
        try {
            Session session=SessionController.searchSession(studentId, classId);
            if (session!=null) {
                textSessionId.setText(session.getSEID());               
                textMarks.setText("");
                textState.setText("");
                textMarks.requestFocus();               
            } else {
                JOptionPane.showMessageDialog(this, "This student not register to above class.");
                textSessionId.setText("");                
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//        String classId=textClassId.getText();
//        ArrayList<Session> sessionList;
//        DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
//        try {
//            sessionList=SessionController.searchSessionFromCID(classId);
//            for (Session session : sessionList) {               
//                int rowCount=defaultTableModel.getRowCount();
//                Object[] rowData={session.getSEID(), session.getSID(), session.getCID()};
//                defaultTableModel.addRow(rowData);
//            }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (SQLException ex) {
//            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private void resultAddToTable() {
        String sessionId=textSessionId.getText();
        String studentId=textStudentId.getText();
        String classId=textClassId.getText();
        String resultId=textResultId.getText();
        String marks=textMarks.getText();
        String state=textState.getText();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
        Object[] rowData={sessionId, studentId, classId, resultId, marks, state};
        defaultTableModel.addRow(rowData);
    }

    private void addExamAndResult() {
        if (checkAllTextField()) {
            ArrayList<Result> resultList= new ArrayList<>();
            DefaultTableModel defaultTableModel = (DefaultTableModel) tableResult.getModel();
            String examId=textExamId.getText();
            for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
                String sessionId=(String) defaultTableModel.getValueAt(i, 0);
                String resultId=(String) defaultTableModel.getValueAt(i, 3);
                String marks=(String) defaultTableModel.getValueAt(i, 4);
                String state=(String) defaultTableModel.getValueAt(i, 5);
                Result result=new Result(sessionId, examId, resultId, marks, state);
                resultList.add(result);
            }
            String examName=textExamName.getText();
            String date=textExamDate.getText();
            Exam exam=new Exam(examId, examName, date);
            try {
                boolean isAdded=ExamController.addExam(exam, resultList);
                if (isAdded) {
                    JOptionPane.showMessageDialog(this, "Added success...");
                } else {
                    JOptionPane.showMessageDialog(this, "Added Fail...");
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Exam ID is duplicate!\nPlease enter correct Exam ID !");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Check whether you have filled all text field.");
        }
        
    }

    private void removeExam() {
        String examId=textExamId.getText();
        try {
            boolean isDeleted=ExamController.deleteExam(examId);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Exam is deleted...");
            } else {
                JOptionPane.showMessageDialog(this, "Delete Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchExam() {
        String examName=textExamName.getText();
        int index=examName.length();
        textModifyExamName.setText("");
        try {
            Exam exam=ExamController.searchExamByExamName(examName);
            if (exam!=null) {
                textExamName.setText(exam.getExam_name());
                textExamName.select(index, 30);
                textExamId.setText(exam.getEID());
                textExamDate.setText(exam.getDate());
                getAllResult(exam.getEID());
            }else{
                textExamId.setText("");
                DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
                defaultTableModel.setRowCount(0);
                loadExamDate();
                generateExamId();
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getAllResult(String eid) {
        ArrayList<Result> results;
        try {
            results=ResultController.searchResult(eid);
            DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
            defaultTableModel.setRowCount(0);
            for (Result result : results) {
                String sessionId=result.getSEID();
                Session session=SessionController.searchSessionFromSEID(sessionId);
                String studentId=session.getSID();
                String classId=session.getCID();
                String resultId=result.getREID();
                String marks=result.getMark();
                String state=result.getState();
                Object[] rowData={sessionId, studentId, classId, resultId, marks, state};
                defaultTableModel.addRow(rowData);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void modifyExam() {
        String examName=textModifyExamName.getText();
        String examId=textExamId.getText();
        String examDate=textExamDate.getText();
        Exam exam=new Exam(examId, examName, examDate);
        try {
            boolean isModify=ExamController.updateExam(exam);
            if (isModify) {
                JOptionPane.showMessageDialog(this, "Exam is updated...");
            } else {
                JOptionPane.showMessageDialog(this, "Update Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void addNewResult() {
        int index=tableResult.getSelectedRow();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
        String sessionId=(String) defaultTableModel.getValueAt(index, 0);
        String examId=textExamId.getText();
        String resultId=(String) defaultTableModel.getValueAt(index, 3);
        String marks=(String) defaultTableModel.getValueAt(index, 4);
        String state=(String) defaultTableModel.getValueAt(index, 5);
        Result result=new Result(sessionId, examId, resultId, marks, state);
        try {
            boolean isAdded=ResultController.addNewResult(result);
            if (isAdded) {
                JOptionPane.showMessageDialog(this, "New result is added successly...");
            } else {
                JOptionPane.showMessageDialog(this, "Added Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Result ID is duplicate!\nPlease enter correct Result ID !");
        }
    }

    private void removeResult() {
        int index=tableResult.getSelectedRow();
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
        String resultId=(String) defaultTableModel.getValueAt(index, 3);
        try {
            boolean isDeleted=ResultController.deleteResult(resultId);
            if (isDeleted) {
                JOptionPane.showMessageDialog(this, "Selected result is deleted successly...");
                defaultTableModel.removeRow(index);
            } else {
                JOptionPane.showMessageDialog(this, "Delete Fail...");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void clearTextFieldAndTable() {
        generateExamId();
        loadExamDate();
        textExamName.setText("");
        textStudentId.setText("");
        textStudentName.setText("");
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
        defaultTableModel.setRowCount(0);
    }

    private boolean checkAllTextField() {
        boolean fillExamId=textExamId.getText().isEmpty();
        boolean fillExamName=textExamName.getText().isEmpty();
        boolean fillExamDate=textExamDate.getText().isEmpty();
        if (fillExamId || fillExamName || fillExamDate) {
            return false;
        } else {
            return true;
        }
    }

    private void generateExamId() {
        String examId=null;
        try {
            examId=GenerateIdController.lastTableId("EID", "Exam");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (examId!=null) {
            int idLenght=examId.length();
            String idNumber=examId.substring(1, idLenght);
            int idNumberInteger=Integer.parseInt(idNumber);
            int nextNumber=idNumberInteger+1;
            if (nextNumber<10) {
                textExamId.setText("e00"+nextNumber);
            }
            if (nextNumber>=10 & nextNumber<100) {
                textExamId.setText("e0"+nextNumber);
            }
            if (nextNumber>=100) {
                textExamId.setText("e"+nextNumber);
            }
        } else {
            textExamId.setText("e001");
        }
    }

    private void generateResultId() {
        String resultId=null;
        try {
            resultId=GenerateIdController.lastTableId("REID", "Result");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ManageExam.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (resultId!=null) {
            int idLenght=resultId.length();
            String idNumber=resultId.substring(2, idLenght);
            int idNumberInteger=Integer.parseInt(idNumber);
            int nextNumber=idNumberInteger+1;
            if (nextNumber<10) {
                textResultId.setText("re00"+nextNumber);
            }
            if (nextNumber>=10 & nextNumber<100) {
                textResultId.setText("re0"+nextNumber);
            }
            if (nextNumber>=100) {
                textResultId.setText("re"+nextNumber);
            }
        } else {
            textResultId.setText("re001");
        }
    }

    private void generateNextResultId() {
        DefaultTableModel defaultTableModel=(DefaultTableModel) tableResult.getModel();
        int rowCount=defaultTableModel.getRowCount();
        String resultId=(String) defaultTableModel.getValueAt(rowCount-1, 3);
        int idLenght=resultId.length();
        String idNumber=resultId.substring(2, idLenght);
        int idNumberInteger=Integer.parseInt(idNumber);
        int nextNumber=idNumberInteger+1;
        if (nextNumber<10) {
            textResultId.setText("re00"+nextNumber);
        }
        if (nextNumber>=10 & nextNumber<100) {
            textResultId.setText("re0"+nextNumber);
        }
        if (nextNumber>=100) {
            textResultId.setText("re"+nextNumber);
        }
    }

}
